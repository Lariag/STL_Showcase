GL.ClearColor(1.0f, 1.0f, 1.0f, 0.0f);
            GL.Clear(ClearBufferMask.ColorBufferBit | ClearBufferMask.DepthBufferBit);

            GL.Enable(EnableCap.DepthTest);
            float newScale = (mesh.Scale < 0.001 ? mesh.Scale * 10 : (mesh.Scale > 0.1 ? mesh.Scale * 0.1f : mesh.Scale)) * 100f;

            var modelview = Matrix4.LookAt(2f, 2f, 2.75f, -1f, -1f, -1f, 0, 0.0f, -1.0f);
            var projection = Matrix4.CreatePerspectiveFieldOfView(0.698132f, 1f, 0.01f, 10f);

            GL.MatrixMode(MatrixMode.Projection);
            GL.LoadMatrix(ref projection);
            GL.MatrixMode(MatrixMode.Modelview);
            GL.LoadMatrix(ref modelview);
            GL.Translate(-mesh.OffsetX * mesh.Scale, mesh.OffsetY * mesh.Scale, -mesh.OffsetZ * mesh.Scale);
            GL.Scale(mesh.Scale, -mesh.Scale, mesh.Scale);

            GL.EnableClientState(ArrayCap.VertexArray);
            GL.EnableClientState(ArrayCap.NormalArray);




            // Lighting
            {
                float highLight = 0.7f * mesh.Scale;

                float[] mat_diffuse1 = { 0f, 0.39f * mesh.Scale, 0f };
                float[] mat_diffuse2 = { 0f, 0f, 0.54f * mesh.Scale };
                float[] mat_diffuse3 = { 0.54f * mesh.Scale, 0f, 0f };
                float[] mat_diffuse4 = { highLight, highLight, highLight };

                float[] light_position1 = { 1f, 0f, 0f, 0f };
                float[] light_position2 = { 0f, 0f, 1f, 0f };
                float[] light_position3 = { 0f, -1f, 0f, 0f };
                float[] light_position4 = { 1f, -1f, 1f, 0f };


                GL.ShadeModel(ShadingModel.Flat);

                GL.Light(LightName.Light0, LightParameter.Position, light_position1);
                GL.Light(LightName.Light1, LightParameter.Position, light_position2);
                GL.Light(LightName.Light2, LightParameter.Position, light_position3);
                GL.Light(LightName.Light3, LightParameter.Position, light_position4);

                GL.Light(LightName.Light0, LightParameter.Diffuse, mat_diffuse1);
                GL.Light(LightName.Light1, LightParameter.Diffuse, mat_diffuse2);
                GL.Light(LightName.Light2, LightParameter.Diffuse, mat_diffuse3);
                GL.Light(LightName.Light3, LightParameter.Diffuse, mat_diffuse4);

                GL.Enable(EnableCap.Lighting);
                GL.Enable(EnableCap.Light1);
                GL.Enable(EnableCap.Light0);
                GL.Enable(EnableCap.Light2);
                GL.Enable(EnableCap.Light3);
                GL.Enable(EnableCap.ColorMaterial);
            }

            GL.GenBuffers(1, out modelVertexBuffer);
            GL.BindBuffer(BufferTarget.ArrayBuffer, modelVertexBuffer);
            //GL.BufferData(BufferTarget.ArrayBuffer, mesh.Vertices.Length * Shared.Extensions.Half.SizeInBytes, mesh.Vertices.ToArray(), BufferUsageHint.StaticDraw);
            GL.BufferData(BufferTarget.ArrayBuffer, (mesh.Vertices.Length * 2) * Shared.Extensions.Half.SizeInBytes, mesh.GetVertexArray(), BufferUsageHint.StaticDraw);

            GL.GenBuffers(1, out modelIndexBuffer);
            GL.BindBuffer(BufferTarget.ElementArrayBuffer, modelIndexBuffer);
            GL.BufferData(BufferTarget.ElementArrayBuffer, mesh.Triangles.Length * sizeof(int), mesh.Triangles.ToArray(), BufferUsageHint.StaticDraw);

            //GL.VertexPointer(3, VertexPointerType.HalfFloat, 0, new IntPtr(0));
            GL.VertexPointer(3, VertexPointerType.HalfFloat, Shared.Extensions.Half.SizeInBytes * 6, new IntPtr(0));
            GL.NormalPointer(NormalPointerType.HalfFloat, Shared.Extensions.Half.SizeInBytes * 6, new IntPtr(Shared.Extensions.Half.SizeInBytes * 3));

            //GL.Color3(System.Drawing.Color.DarkBlue);
            GL.Color3(System.Drawing.Color.White);
            GL.DrawElements(BeginMode.Triangles, mesh.Triangles.Length, DrawElementsType.UnsignedInt, 0);



            GL.Disable(EnableCap.Lighting);
            GL.Disable(EnableCap.Light0);
            GL.Disable(EnableCap.Light1);
            GL.Disable(EnableCap.Light2);
            GL.Disable(EnableCap.Light3);
            GL.Disable(EnableCap.ColorMaterial);

            GL.DisableClientState(ArrayCap.VertexArray);
            GL.DisableClientState(ArrayCap.NormalArray);


            GL.Flush();
            using (var bmp = new Bitmap(sizeInPixels, sizeInPixels, SDPixelFormat.Format32bppArgb))
            {
                var bmpData = bmp.LockBits(new Rectangle(0, 0, sizeInPixels, sizeInPixels), ImageLockMode.WriteOnly, SDPixelFormat.Format32bppArgb);
                GL.PixelStore(PixelStoreParameter.PackRowLength, bmpData.Stride / 4);
                GL.ReadPixels(0, 0, sizeInPixels, sizeInPixels, PixelFormat.Bgra, PixelType.UnsignedByte, bmpData.Scan0);
                bmp.UnlockBits(bmpData);

                bmpData = bmp.LockBits(new Rectangle(0, 0, sizeInPixels, sizeInPixels), ImageLockMode.ReadOnly, SDPixelFormat.Format32bppArgb);

                //bmp.Save(@"D:\test.png", ImageFormat.Png);

                var bitmapSource = BitmapSource.Create(
                    bmpData.Width, bmpData.Height,
                    bmp.HorizontalResolution, bmp.VerticalResolution,
                    PixelFormats.Bgra32, null,
                    bmpData.Scan0, bmpData.Stride * bmpData.Height, bmpData.Stride);
                bitmapSource.Freeze();
                bmp.UnlockBits(bmpData);

                return bitmapSource;
            }