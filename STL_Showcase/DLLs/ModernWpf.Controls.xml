<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>ModernWpf.Controls</name>
  </assembly>
  <members>
    <member name="T:ModernWpf.Automation.Peers.DropDownButtonAutomationPeer">
      <summary>Exposes DropDownButton types to Microsoft UI Automation.</summary>
    </member>
    <member name="M:ModernWpf.Automation.Peers.DropDownButtonAutomationPeer.#ctor(ModernWpf.Controls.DropDownButton)">
      <summary>Initializes a new instance of the DropDownButtonAutomationPeer class.</summary>
      <param name="owner">The DropDownButton control instance to create the peer for.</param>
    </member>
    <member name="P:ModernWpf.Automation.Peers.DropDownButtonAutomationPeer.ExpandCollapseState">
      <summary>Gets the state, expanded or collapsed, of the control.</summary>
      <returns>A value of the enumeration.</returns>
    </member>
    <member name="M:ModernWpf.Automation.Peers.DropDownButtonAutomationPeer.Collapse">
      <summary>Hides the control's drop down menu.</summary>
    </member>
    <member name="M:ModernWpf.Automation.Peers.DropDownButtonAutomationPeer.Expand">
      <summary>Displays the control's drop down menu.</summary>
    </member>
    <member name="T:ModernWpf.Automation.Peers.HyperlinkButtonAutomationPeer">
      <summary>Exposes HyperlinkButton types to Microsoft UI Automation.</summary>
    </member>
    <member name="M:ModernWpf.Automation.Peers.HyperlinkButtonAutomationPeer.#ctor(ModernWpf.Controls.HyperlinkButton)">
      <summary>Initializes a new instance of the HyperlinkButtonAutomationPeer class.</summary>
      <param name="owner">The owner element to create for.</param>
    </member>
    <member name="M:ModernWpf.Automation.Peers.HyperlinkButtonAutomationPeer.Invoke">
      <summary>Sends a request to click the hyperlink button associated with the automation peer.</summary>
    </member>
    <member name="T:ModernWpf.Automation.Peers.PersonPictureAutomationPeer">
      <summary>Exposes <see cref="ModernWpf.Controls.PersonPicture?text=PersonPicture" /> types to Microsoft UI Automation.</summary>
    </member>
    <member name="T:ModernWpf.Automation.Peers.RatingControlAutomationPeer">
      <summary>Exposes <see cref="ModernWpf.Controls.RatingControl?text=RatingControl" /> types to Microsoft UI Automation.</summary>
    </member>
    <member name="T:ModernWpf.Automation.Peers.SplitButtonAutomationPeer">
      <summary>Exposes SplitButton types to Microsoft UI Automation.</summary>
    </member>
    <member name="M:ModernWpf.Automation.Peers.SplitButtonAutomationPeer.#ctor(ModernWpf.Controls.SplitButton)">
      <summary>Initializes a new instance of the SplitButtonAutomationPeer class.</summary>
      <param name="owner">The SplitButton control instance to create the peer for.</param>
    </member>
    <member name="P:ModernWpf.Automation.Peers.SplitButtonAutomationPeer.ExpandCollapseState">
      <summary>Gets the state, expanded or collapsed, of the control.</summary>
      <returns>A value of the enumeration.</returns>
    </member>
    <member name="M:ModernWpf.Automation.Peers.SplitButtonAutomationPeer.Collapse">
      <summary>Hides the control's drop down menu.</summary>
    </member>
    <member name="M:ModernWpf.Automation.Peers.SplitButtonAutomationPeer.Expand">
      <summary>Displays the control's drop down menu.</summary>
    </member>
    <member name="M:ModernWpf.Automation.Peers.SplitButtonAutomationPeer.Invoke">
      <summary>Sends a request to click the button associated with the automation peer.</summary>
    </member>
    <member name="T:ModernWpf.Automation.Peers.ToggleSplitButtonAutomationPeer">
      <summary>Exposes ToggleSplitButton types to Microsoft UI Automation.</summary>
    </member>
    <member name="M:ModernWpf.Automation.Peers.ToggleSplitButtonAutomationPeer.#ctor(ModernWpf.Controls.ToggleSplitButton)">
      <summary>Initializes a new instance of the ToggleSplitButtonAutomationPeer class.</summary>
      <param name="owner">The ToggleSplitButton control instance to create the peer for.</param>
    </member>
    <member name="P:ModernWpf.Automation.Peers.ToggleSplitButtonAutomationPeer.ExpandCollapseState">
      <summary>Gets the state, expanded or collapsed, of the control.</summary>
      <returns>A value of the enumeration.</returns>
    </member>
    <member name="P:ModernWpf.Automation.Peers.ToggleSplitButtonAutomationPeer.ToggleState">
      <summary>Gets the toggle state of the control.</summary>
      <returns>A value of the enumeration.</returns>
    </member>
    <member name="M:ModernWpf.Automation.Peers.ToggleSplitButtonAutomationPeer.Collapse">
      <summary>Hides the control's drop down menu.</summary>
    </member>
    <member name="M:ModernWpf.Automation.Peers.ToggleSplitButtonAutomationPeer.Expand">
      <summary>Displays the control's drop down menu.</summary>
    </member>
    <member name="M:ModernWpf.Automation.Peers.ToggleSplitButtonAutomationPeer.Toggle">
      <summary>Cycles through the toggle states of a control.</summary>
    </member>
    <member name="T:ModernWpf.Controls.AnimationContext">
      <summary>Defines constants that specify information about changes to a data collection that is useful for animating data elements.</summary>
    </member>
    <member name="F:ModernWpf.Controls.AnimationContext.CollectionChangeAdd">
      <summary>An item was added to the collection.</summary>
    </member>
    <member name="F:ModernWpf.Controls.AnimationContext.CollectionChangeRemove">
      <summary>An item was removed from the collection.</summary>
    </member>
    <member name="F:ModernWpf.Controls.AnimationContext.CollectionChangeReset">
      <summary>The collection was reset.</summary>
    </member>
    <member name="F:ModernWpf.Controls.AnimationContext.LayoutTransition">
      <summary>The layout of items was changed.</summary>
    </member>
    <member name="F:ModernWpf.Controls.AnimationContext.None">
      <summary>There was no change.</summary>
    </member>
    <member name="T:ModernWpf.Controls.AppBarButton">
      <summary>Represents a templated button control to be displayed in an AppBar.</summary>
    </member>
    <member name="M:ModernWpf.Controls.AppBarButton.#ctor">
      <summary>Initializes a new instance of the AppBarButton class.</summary>
    </member>
    <member name="P:ModernWpf.Controls.AppBarButton.Icon">
      <summary>Gets or sets the graphic content of the app bar button.</summary>
      <returns>The graphic content of the app bar button.</returns>
    </member>
    <member name="F:ModernWpf.Controls.AppBarButton.IconProperty">
      <summary>Identifies the Icon dependency property.</summary>
      <returns>The identifier for the Icon dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.AppBarButton.IsCompact">
      <summary>Gets or sets a value that indicates whether the button is shown with no label and reduced padding.</summary>
      <returns>**true** if the button is shown in its compact state; otherwise, **false**. The default is **false**.</returns>
    </member>
    <member name="F:ModernWpf.Controls.AppBarButton.IsCompactProperty">
      <summary>Identifies the IsCompact dependency property.</summary>
      <returns>The identifier for the IsCompact dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.AppBarButton.IsInOverflow">
      <summary>Gets a value that indicates whether this item is in the overflow menu.</summary>
      <returns>**true** if this item is in the overflow menu; otherwise, **false**.</returns>
    </member>
    <member name="F:ModernWpf.Controls.AppBarButton.IsInOverflowProperty">
      <summary>Identifies the IsInOverflow dependency property.</summary>
      <returns>The identifier for the IsInOverflow dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.AppBarButton.Label">
      <summary>Gets or sets the text description displayed on the app bar button.</summary>
      <returns>The text description displayed on the app bar button.</returns>
    </member>
    <member name="P:ModernWpf.Controls.AppBarButton.LabelPosition">
      <summary>Gets or sets a value that indicates the placement and visibility of the button's label.</summary>
      <returns>An enumeration value that specifies the placement and visibility of the button's label. The default is **Default**.</returns>
    </member>
    <member name="F:ModernWpf.Controls.AppBarButton.LabelPositionProperty">
      <summary>Identifies the LabelPosition dependency property.</summary>
      <returns>The identifier for the LabelPosition dependency property.</returns>
    </member>
    <member name="F:ModernWpf.Controls.AppBarButton.LabelProperty">
      <summary>Identifies the Label dependency property.</summary>
      <returns>The identifier for the Label dependency property.</returns>
    </member>
    <member name="T:ModernWpf.Controls.AppBarElementContainer">
      <summary>Represents a container that allows an element that doesn't implement ICommandBarElement to be displayed in a command bar.</summary>
    </member>
    <member name="M:ModernWpf.Controls.AppBarElementContainer.#ctor">
      <summary>Initializes a new instance of the AppBarElementContainer class.</summary>
    </member>
    <member name="P:ModernWpf.Controls.AppBarElementContainer.DynamicOverflowOrder">
      <summary>Gets or sets the order in which this item is moved to the CommandBar overflow menu.</summary>
      <returns>The order in which this item is moved to the overflow menu relative to other items.</returns>
    </member>
    <member name="F:ModernWpf.Controls.AppBarElementContainer.DynamicOverflowOrderProperty">
      <summary>Identifies the DynamicOverflowOrder dependency property.</summary>
      <returns>The identifier for the DynamicOverflowOrder dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.AppBarElementContainer.IsCompact">
      <summary>Gets or sets a value that indicates whether the element is shown in its compact state.</summary>
      <returns>**true** if the element is shown in its compact state; otherwise, **false**. The default is **false**.</returns>
    </member>
    <member name="F:ModernWpf.Controls.AppBarElementContainer.IsCompactProperty">
      <summary>Identifies the IsCompact dependency property.</summary>
      <returns>The identifier for the IsCompact dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.AppBarElementContainer.IsInOverflow">
      <summary>Gets a value that indicates whether this item is in the overflow menu.</summary>
      <returns>**true** if this item is in the overflow menu; otherwise, **false**.</returns>
    </member>
    <member name="F:ModernWpf.Controls.AppBarElementContainer.IsInOverflowProperty">
      <summary>Identifies the IsInOverflow dependency property.</summary>
      <returns>The identifier for the IsInOverflow dependency property.</returns>
    </member>
    <member name="T:ModernWpf.Controls.AppBarSeparator">
      <summary>Represents a line that separates items in an AppBar or CommandBar.</summary>
    </member>
    <member name="M:ModernWpf.Controls.AppBarSeparator.#ctor">
      <summary>Initializes a new instance of the AppBarSeparator class.</summary>
    </member>
    <member name="P:ModernWpf.Controls.AppBarSeparator.IsCompact">
      <summary>Gets or sets a value that indicates whether the separator is shown with reduced padding.</summary>
      <returns>**True** if the separator is shown in its compact state; otherwise, **false**. The default is **false**.</returns>
    </member>
    <member name="F:ModernWpf.Controls.AppBarSeparator.IsCompactProperty">
      <summary>Identifies the IsCompact dependency property.</summary>
      <returns>The identifier for the IsCompact dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.AppBarSeparator.IsInOverflow">
      <summary>Gets a value that indicates whether this item is in the overflow menu.</summary>
      <returns>**true** if this item is in the overflow menu; otherwise, **false**.</returns>
    </member>
    <member name="F:ModernWpf.Controls.AppBarSeparator.IsInOverflowProperty">
      <summary>Identifies the IsInOverflow dependency property.</summary>
      <returns>The identifier for the IsInOverflow dependency property.</returns>
    </member>
    <member name="T:ModernWpf.Controls.AppBarToggleButton">
      <summary>Represents a button control that can switch states and be displayed in an AppBar.</summary>
    </member>
    <member name="M:ModernWpf.Controls.AppBarToggleButton.#ctor">
      <summary>Initializes a new instance of the AppBarToggleButton class.</summary>
    </member>
    <member name="P:ModernWpf.Controls.AppBarToggleButton.Icon">
      <summary>Gets or sets the graphic content of the app bar toggle button.</summary>
      <returns>The graphic content of the app bar toggle button.</returns>
    </member>
    <member name="F:ModernWpf.Controls.AppBarToggleButton.IconProperty">
      <summary>Identifies the Icon dependency property.</summary>
      <returns>The identifier for the Icon dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.AppBarToggleButton.IsCompact">
      <summary>Gets or sets a value that indicates whether the button is shown with no label and reduced padding.</summary>
      <returns>**True** if the button is shown in its compact state; otherwise, **false**. The default is **false**.</returns>
    </member>
    <member name="F:ModernWpf.Controls.AppBarToggleButton.IsCompactProperty">
      <summary>Identifies the IsCompact dependency property.</summary>
      <returns>The identifier for the IsCompact dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.AppBarToggleButton.IsInOverflow">
      <summary>Gets a value that indicates whether this item is in the overflow menu.</summary>
      <returns>**true** if this item is in the overflow menu; otherwise, **false**.</returns>
    </member>
    <member name="F:ModernWpf.Controls.AppBarToggleButton.IsInOverflowProperty">
      <summary>Identifies the IsInOverflow dependency property.</summary>
      <returns>The identifier for the IsInOverflow dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.AppBarToggleButton.Label">
      <summary>Gets or sets the text description displayed on the app bar toggle button.</summary>
      <returns>The text description displayed on the app bar toggle button.</returns>
    </member>
    <member name="P:ModernWpf.Controls.AppBarToggleButton.LabelPosition">
      <summary>Gets or sets a value that indicates the placement and visibility of the button's label.</summary>
      <returns>An enumeration value that specifies the placement and visibility of the button's label. The default is **Default**.</returns>
    </member>
    <member name="F:ModernWpf.Controls.AppBarToggleButton.LabelPositionProperty">
      <summary>Identifies the LabelPosition dependency property.</summary>
      <returns>The identifier for the LabelPosition dependency property.</returns>
    </member>
    <member name="F:ModernWpf.Controls.AppBarToggleButton.LabelProperty">
      <summary>Identifies the Label dependency property.</summary>
      <returns>The identifier for the Label dependency property.</returns>
    </member>
    <member name="T:ModernWpf.Controls.AutoSuggestBox">
      <summary>Represents a text control that makes suggestions to users as they enter text using a keyboard or pen (using ink and handwriting recognition). The app is notified when text has been changed by the user and is responsible for providing relevant suggestions for this control to display.</summary>
    </member>
    <member name="M:ModernWpf.Controls.AutoSuggestBox.#ctor">
      <summary>Initializes a new instance of the AutoSuggestBox class.</summary>
    </member>
    <member name="P:ModernWpf.Controls.AutoSuggestBox.Description">
      <summary>Gets or sets content that is shown below the control. The content should provide guidance about the input expected by the control.</summary>
      <returns>The content to be displayed below the control. The default is **null**.</returns>
    </member>
    <member name="F:ModernWpf.Controls.AutoSuggestBox.DescriptionProperty">
      <summary>Identifies the Description dependency property.</summary>
      <returns>The identifier for the Description dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.AutoSuggestBox.Header">
      <summary>Gets or sets the header object for the text box portion of this control.</summary>
      <returns>The header object for the text box portion of this control.</returns>
    </member>
    <member name="F:ModernWpf.Controls.AutoSuggestBox.HeaderProperty">
      <summary>Identifies the Header dependency property.</summary>
      <returns>The identifier for the Header dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.AutoSuggestBox.IsSuggestionListOpen">
      <summary>Gets or sets a Boolean value indicating whether the drop-down portion of the AutoSuggestBox is open.</summary>
      <returns>A Boolean value indicating whether the drop-down portion of the AutoSuggestBox is open.</returns>
    </member>
    <member name="F:ModernWpf.Controls.AutoSuggestBox.IsSuggestionListOpenProperty">
      <summary>Identifies the IsSuggestionListOpen dependency property.</summary>
      <returns>Identifier for the IsSuggestionListOpen dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.AutoSuggestBox.MaxSuggestionListHeight">
      <summary>Gets or set the maximum height for the drop-down portion of the AutoSuggestBox control.</summary>
      <returns>The maximum height for the drop-down portion of the AutoSuggestBox control.</returns>
    </member>
    <member name="F:ModernWpf.Controls.AutoSuggestBox.MaxSuggestionListHeightProperty">
      <summary>Identifies the MaxSuggestionListHeight dependency property.</summary>
      <returns>Identifier for the MaxSuggestionListHeight dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.AutoSuggestBox.PlaceholderText">
      <summary>Gets or sets the placeholder text to be displayed in the control.</summary>
      <returns>The placeholder text to be displayed in the control. The default is an empty string.</returns>
    </member>
    <member name="F:ModernWpf.Controls.AutoSuggestBox.PlaceholderTextProperty">
      <summary>Identifies the PlaceholderText dependency property.</summary>
      <returns>The identifier for the PlaceholderText dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.AutoSuggestBox.QueryIcon">
      <summary>Gets or sets the graphic content of the button that is clicked to initiate a query.</summary>
      <returns>The graphic content of the button that is clicked to initiate a query, if present; otherwise, **null**. The default is **null**.</returns>
    </member>
    <member name="F:ModernWpf.Controls.AutoSuggestBox.QueryIconProperty">
      <summary>Identifies the QueryIcon dependency property.</summary>
      <returns>The identifier for the QueryIcon dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.AutoSuggestBox.Text">
      <summary>Gets or sets the text that is shown in the control.</summary>
      <returns>The text that is shown in the control.</returns>
    </member>
    <member name="P:ModernWpf.Controls.AutoSuggestBox.TextBoxStyle">
      <summary>Gets or sets the style of the auto-suggest text box.</summary>
      <returns>The style of the auto-suggest text box.</returns>
    </member>
    <member name="F:ModernWpf.Controls.AutoSuggestBox.TextBoxStyleProperty">
      <summary>Identifies the TextBoxStyle dependency property.</summary>
      <returns>Identifier for the TextBoxStyle dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.AutoSuggestBox.TextMemberPath">
      <summary>Gets or sets the property path that is used to get the value for display in the text box portion of the AutoSuggestBox control, when an item is selected.</summary>
      <returns>The property path that is used to get the value for display in the text box portion of the AutoSuggestBox control, when an item is selected.</returns>
    </member>
    <member name="F:ModernWpf.Controls.AutoSuggestBox.TextMemberPathProperty">
      <summary>Identifies the TextMemberPath dependency property.</summary>
      <returns>Identifier for the TextMemberPath dependency property.</returns>
    </member>
    <member name="F:ModernWpf.Controls.AutoSuggestBox.TextProperty">
      <summary>Identifies the PlaceholderText dependency property.</summary>
      <returns>The identifier for the PlaceholderText dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.AutoSuggestBox.UpdateTextOnSelect">
      <summary>Used in conjunction with TextMemberPath, gets or sets a value indicating whether items in the view will trigger an update of the editable text part of the AutoSuggestBox when clicked.</summary>
      <returns>A value indicating whether items in the view will trigger an update of the editable text part of the AutoSuggestBox when clicked.</returns>
    </member>
    <member name="F:ModernWpf.Controls.AutoSuggestBox.UpdateTextOnSelectProperty">
      <summary>Identifies the UpdateTextOnSelect dependency property.</summary>
      <returns>Identifier for the UpdateTextOnSelect dependency property.</returns>
    </member>
    <member name="E:ModernWpf.Controls.AutoSuggestBox.QuerySubmitted">
      <summary>Occurs when the user submits a search query.</summary>
    </member>
    <member name="E:ModernWpf.Controls.AutoSuggestBox.SuggestionChosen">
      <summary>Raised before the text content of the editable control component is updated.</summary>
    </member>
    <member name="E:ModernWpf.Controls.AutoSuggestBox.TextChanged">
      <summary>Raised after the text content of the editable control component is updated.</summary>
    </member>
    <member name="T:ModernWpf.Controls.AutoSuggestBoxQuerySubmittedEventArgs">
      <summary>Provides event data for the AutoSuggestBox.QuerySubmitted event.</summary>
    </member>
    <member name="M:ModernWpf.Controls.AutoSuggestBoxQuerySubmittedEventArgs.#ctor">
      <summary>Initializes a new instance of the AutoSuggestBoxQuerySubmittedEventArgs class.</summary>
    </member>
    <member name="P:ModernWpf.Controls.AutoSuggestBoxQuerySubmittedEventArgs.ChosenSuggestion">
      <summary>Gets the suggested result that the user chose.</summary>
      <returns>The suggested result that the user chose.</returns>
    </member>
    <member name="P:ModernWpf.Controls.AutoSuggestBoxQuerySubmittedEventArgs.QueryText">
      <summary>Gets the query text of the current search.</summary>
      <returns>The query text of the current search.</returns>
    </member>
    <member name="T:ModernWpf.Controls.AutoSuggestBoxSuggestionChosenEventArgs">
      <summary>Provides data for the SuggestionChosen event.</summary>
    </member>
    <member name="M:ModernWpf.Controls.AutoSuggestBoxSuggestionChosenEventArgs.#ctor">
      <summary>Initializes a new instance of the AutoSuggestBoxSuggestionChosenEventArgs class.</summary>
    </member>
    <member name="P:ModernWpf.Controls.AutoSuggestBoxSuggestionChosenEventArgs.SelectedItem">
      <summary>Gets a reference to the selected item.</summary>
      <returns>A reference to the selected item.</returns>
    </member>
    <member name="T:ModernWpf.Controls.AutoSuggestBoxTextChangedEventArgs">
      <summary>Provides data for the TextChanged event.</summary>
    </member>
    <member name="M:ModernWpf.Controls.AutoSuggestBoxTextChangedEventArgs.#ctor">
      <summary>Initializes a new instance of the AutoSuggestBoxTextChangedEventArgs class.</summary>
    </member>
    <member name="P:ModernWpf.Controls.AutoSuggestBoxTextChangedEventArgs.Reason">
      <summary>Gets or sets a value that indicates the reason for the text changing in the AutoSuggestBox.</summary>
      <returns>The reason for the text changing in the AutoSuggestBox.</returns>
    </member>
    <member name="F:ModernWpf.Controls.AutoSuggestBoxTextChangedEventArgs.ReasonProperty">
      <summary>Identifies the Reason dependency property.</summary>
      <returns>Identifier for the Reason dependency property.</returns>
    </member>
    <member name="M:ModernWpf.Controls.AutoSuggestBoxTextChangedEventArgs.CheckCurrent">
      <summary>Returns a Boolean value indicating if the current value of the TextBox is unchanged from the point in time when the TextChanged event was raised.</summary>
      <returns>Indicates if the current value of the TextBox is unchanged from the point in time when the TextChanged event was raised.</returns>
    </member>
    <member name="T:ModernWpf.Controls.AutoSuggestionBoxTextChangeReason">
      <summary>Values used to indicate the reason for the text changing in the AutoSuggestBox.</summary>
    </member>
    <member name="F:ModernWpf.Controls.AutoSuggestionBoxTextChangeReason.ProgrammaticChange">
      <summary>The text was changed via code.</summary>
    </member>
    <member name="F:ModernWpf.Controls.AutoSuggestionBoxTextChangeReason.SuggestionChosen">
      <summary>The user selected one of the items in the auto-suggestion box.</summary>
    </member>
    <member name="F:ModernWpf.Controls.AutoSuggestionBoxTextChangeReason.UserInput">
      <summary>The user edited the text.</summary>
    </member>
    <member name="T:ModernWpf.Controls.CommandBar">
      <summary>Represents a specialized app bar that provides layout for AppBarButton and related command elements.</summary>
    </member>
    <member name="M:ModernWpf.Controls.CommandBar.#ctor">
      <summary>Initializes a new instance of the CommandBar class.</summary>
    </member>
    <member name="P:ModernWpf.Controls.CommandBar.CommandBarOverflowPresenterStyle">
      <summary>Gets or sets the Style applied to the overflow content of the CommandBar.</summary>
      <returns>The applied Style for the overflow content of the CommandBar, if present; otherwise, **null**. The default is **null**.</returns>
    </member>
    <member name="F:ModernWpf.Controls.CommandBar.CommandBarOverflowPresenterStyleProperty">
      <summary>Identifies the CommandBarOverflowPresenterStyle dependency property.</summary>
      <returns>The identifier for the CommandBarOverflowPresenterStyle dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.CommandBar.DefaultLabelPosition">
      <summary>Gets or sets a value that indicates the placement and visibility of the labels on the command bar's buttons.</summary>
      <returns>An enumeration value that indicates the placement and visibility of the labels on the command bar's buttons. The default is **Bottom**.</returns>
    </member>
    <member name="F:ModernWpf.Controls.CommandBar.DefaultLabelPositionProperty">
      <summary>Identifies the DefaultLabelPosition dependency property.</summary>
      <returns>The identifier for the DefaultLabelPosition dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.CommandBar.IsDynamicOverflowEnabled">
      <summary>Gets or sets a value that indicates whether primary commands automatically move to the overflow menu when space is limited.</summary>
      <returns>**true** if primary commands automatically move to the overflow menu when space is limited; otherwise, **false**. The default is **true**.</returns>
    </member>
    <member name="F:ModernWpf.Controls.CommandBar.IsDynamicOverflowEnabledProperty">
      <summary>Identifies the IsDynamicOverflowEnabled dependency property.</summary>
      <returns>The identifier for the IsDynamicOverflowEnabled dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.CommandBar.OverflowButtonVisibility">
      <summary>Gets or sets a value that indicates when a command bar's overflow button is shown.</summary>
      <returns>An enumeration value that indicates when a command bar's overflow button is shown. The default is **Auto**.</returns>
    </member>
    <member name="F:ModernWpf.Controls.CommandBar.OverflowButtonVisibilityProperty">
      <summary>Identifies the OverflowButtonVisibility dependency property.</summary>
      <returns>The identifier for the OverflowButtonVisibility dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.CommandBar.PrimaryCommands">
      <summary>Gets the collection of primary command elements for the CommandBar.</summary>
      <returns>The collection of primary command elements for the CommandBar. The default is an empty collection.</returns>
    </member>
    <member name="P:ModernWpf.Controls.CommandBar.SecondaryCommands">
      <summary>Gets the collection of secondary command elements for the CommandBar.</summary>
      <returns>The collection of secondary command elements for the CommandBar. The default is an empty collection.</returns>
    </member>
    <member name="T:ModernWpf.Controls.CommandBarDefaultLabelPosition">
      <summary>Defines constants that specify the placement and visibility of AppBarButton labels in a CommandBar.</summary>
    </member>
    <member name="F:ModernWpf.Controls.CommandBarDefaultLabelPosition.Bottom">
      <summary>App bar button labels are shown below the icon. Labels are visible only when the command bar is open.</summary>
    </member>
    <member name="F:ModernWpf.Controls.CommandBarDefaultLabelPosition.Collapsed">
      <summary>App bar button labels are always hidden whether the command bar is open or closed.</summary>
    </member>
    <member name="F:ModernWpf.Controls.CommandBarDefaultLabelPosition.Right">
      <summary>App bar button labels are shown to the right of the icon. Labels are visible even when the command bar is closed.</summary>
    </member>
    <member name="T:ModernWpf.Controls.CommandBarFlyout">
      <summary>Represents a specialized flyout that provides layout for AppBarButton and related command elements.</summary>
    </member>
    <member name="M:ModernWpf.Controls.CommandBarFlyout.#ctor">
      <summary>Initializes a new instance of the CommandBarFlyout class.</summary>
    </member>
    <member name="P:ModernWpf.Controls.CommandBarFlyout.PrimaryCommands">
      <summary>Gets the collection of primary command elements for the CommandBarFlyout.</summary>
      <returns>The collection of primary command elements for the CommandBarFlyout. The default is an empty collection.</returns>
    </member>
    <member name="P:ModernWpf.Controls.CommandBarFlyout.SecondaryCommands">
      <summary>Gets the collection of secondary command elements for the CommandBarFlyout.</summary>
      <returns>The collection of secondary command elements for the CommandBarFlyout. The default is an empty collection.</returns>
    </member>
    <member name="T:ModernWpf.Controls.CommandBarLabelPosition">
      <summary>Defines constants that specify the placement and visibility of an app bar button's label.</summary>
    </member>
    <member name="F:ModernWpf.Controls.CommandBarLabelPosition.Collapsed">
      <summary>The app bar button's label is always hidden whether the command bar is open or closed.</summary>
    </member>
    <member name="F:ModernWpf.Controls.CommandBarLabelPosition.Default">
      <summary>The placement and visibility of the app bar button's label is determined by the value of the CommandBar.DefaultLabelPosition property.</summary>
    </member>
    <member name="T:ModernWpf.Controls.CommandBarOverflowButtonVisibility">
      <summary>Defines constants that specify when a command bar's overflow button is shown.</summary>
    </member>
    <member name="F:ModernWpf.Controls.CommandBarOverflowButtonVisibility.Auto">
      <summary>The overflow button automatically hides when there are no secondary commands and the closed state of the CommandBar is the same as the open state.</summary>
    </member>
    <member name="F:ModernWpf.Controls.CommandBarOverflowButtonVisibility.Collapsed">
      <summary>The overflow button is never shown.</summary>
    </member>
    <member name="F:ModernWpf.Controls.CommandBarOverflowButtonVisibility.Visible">
      <summary>The overflow button is always shown.</summary>
    </member>
    <member name="T:ModernWpf.Controls.CommandBarOverflowPresenter">
      <summary>Displays the overflow content of a CommandBar.</summary>
    </member>
    <member name="M:ModernWpf.Controls.CommandBarOverflowPresenter.#ctor">
      <summary>Initializes a new instance of the CommandBarOverflowPresenter class.</summary>
    </member>
    <member name="T:ModernWpf.Controls.ContentDialog">
      <summary>Represents a dialog box that can be customized to contain checkboxes, hyperlinks, buttons and any other XAML content.</summary>
    </member>
    <member name="M:ModernWpf.Controls.ContentDialog.#ctor">
      <summary>Initializes a new instance of the ContentDialog class.</summary>
    </member>
    <member name="P:ModernWpf.Controls.ContentDialog.CloseButtonCommand">
      <summary>Gets or sets the command to invoke when the close button is tapped.</summary>
      <returns>The command to invoke when the primary button is tapped.</returns>
    </member>
    <member name="P:ModernWpf.Controls.ContentDialog.CloseButtonCommandParameter">
      <summary>Gets or sets the parameter to pass to the command for the close button.</summary>
      <returns>The parameter to pass to the command for the close button. The default is **null.**</returns>
    </member>
    <member name="F:ModernWpf.Controls.ContentDialog.CloseButtonCommandParameterProperty">
      <summary>Gets the identifier of the CloseButtonCommandParameter dependency property.</summary>
      <returns>The identifier of the CloseButtonCommandParameter dependency property.</returns>
    </member>
    <member name="F:ModernWpf.Controls.ContentDialog.CloseButtonCommandProperty">
      <summary>Gets the identifier of the CloseButtonCommand dependency property.</summary>
      <returns>The identifier of the CloseButtonCommand dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.ContentDialog.CloseButtonStyle">
      <summary>Gets or sets the Style to apply to the dialog's close button.</summary>
      <returns>The applied style for the button, if present; otherwise, **null**.</returns>
    </member>
    <member name="F:ModernWpf.Controls.ContentDialog.CloseButtonStyleProperty">
      <summary>Gets the identifier of the CloseButtonStyle dependency property.</summary>
      <returns>The identifier of the CloseButtonStyle dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.ContentDialog.CloseButtonText">
      <summary>Gets or sets the text to display on the close button.</summary>
      <returns>The text to display on the close button.</returns>
    </member>
    <member name="F:ModernWpf.Controls.ContentDialog.CloseButtonTextProperty">
      <summary>Gets the identifier of the CloseButtonText dependency property.</summary>
      <returns>The identifier of the CloseButtonText dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.ContentDialog.DefaultButton">
      <summary>Gets or sets a value that indicates which button on the dialog is the default action.</summary>
      <returns>A value of the enumeration. The default is **None.**</returns>
    </member>
    <member name="F:ModernWpf.Controls.ContentDialog.DefaultButtonProperty">
      <summary>Gets the identifier of the DefaultButton dependency property.</summary>
      <returns>The identifier of the DefaultButton dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.ContentDialog.FullSizeDesired">
      <summary>Gets or sets a value that indicates whether a request is being made to display the dialog full screen.</summary>
      <returns>**true** to request that the dialog is displayed full screen; otherwise, **false**. The default is **false**.</returns>
    </member>
    <member name="F:ModernWpf.Controls.ContentDialog.FullSizeDesiredProperty">
      <summary>Gets the identifier of the FullSizeDesired dependency property.</summary>
      <returns>The identifier of the FullSizeDesired dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.ContentDialog.IsPrimaryButtonEnabled">
      <summary>Gets or sets whether the dialog's primary button is enabled.</summary>
      <returns>True if the primary button of the dialog is enabled; Otherwise, false.</returns>
    </member>
    <member name="F:ModernWpf.Controls.ContentDialog.IsPrimaryButtonEnabledProperty">
      <summary>Gets the identifier of the IsPrimaryButtonEnabled dependency property.</summary>
      <returns>The identifier of the IsPrimaryButtonEnabled dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.ContentDialog.IsSecondaryButtonEnabled">
      <summary>Gets or sets whether the dialog's secondary button is enabled.</summary>
      <returns>True if the secondary button of the dialog is enabled; Otherwise, false.</returns>
    </member>
    <member name="F:ModernWpf.Controls.ContentDialog.IsSecondaryButtonEnabledProperty">
      <summary>Gets the identifier of the IsSecondaryButtonEnabled dependency property.</summary>
      <returns>The identifier of the IsSecondaryButtonEnabled dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.ContentDialog.PrimaryButtonCommand">
      <summary>Gets or sets the command to invoke when the primary button is tapped.</summary>
      <returns>The command to invoke when the primary button is tapped.</returns>
    </member>
    <member name="P:ModernWpf.Controls.ContentDialog.PrimaryButtonCommandParameter">
      <summary>Gets or sets the parameter to pass to the command for the primary button.</summary>
      <returns>The parameter to pass to the command for the primary button. The default is null.</returns>
    </member>
    <member name="F:ModernWpf.Controls.ContentDialog.PrimaryButtonCommandParameterProperty">
      <summary>Gets the identifier of the PrimaryButtonCommandParameter dependency property.</summary>
      <returns>The identifier of the PrimaryButtonCommandParameter dependency property</returns>
    </member>
    <member name="F:ModernWpf.Controls.ContentDialog.PrimaryButtonCommandProperty">
      <summary>Gets the identifier of the PrimaryButtonCommand dependency property.</summary>
      <returns>The identifier of the PrimaryButtonCommand dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.ContentDialog.PrimaryButtonStyle">
      <summary>Gets or sets the Style to apply to the dialog's primary button.</summary>
      <returns>The applied style for the button, if present; otherwise, **null**.</returns>
    </member>
    <member name="F:ModernWpf.Controls.ContentDialog.PrimaryButtonStyleProperty">
      <summary>Gets the identifier of the PrimaryButtonStyle dependency property.</summary>
      <returns>The identifier of the PrimaryButtonStyle dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.ContentDialog.PrimaryButtonText">
      <summary>Gets or sets the text to display on the primary button.</summary>
      <returns>The text to display on the primary button. To hide this button, set the text to **null** or string.empty. The default is empty.</returns>
    </member>
    <member name="F:ModernWpf.Controls.ContentDialog.PrimaryButtonTextProperty">
      <summary>Gets the identifier of the PrimaryButtonText dependency property.</summary>
      <returns>The identifier of the PrimaryButtonText dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.ContentDialog.SecondaryButtonCommand">
      <summary>Gets or sets the command to invoke when the secondary button is tapped.</summary>
      <returns>The command to invoke when the secondary button is tapped.</returns>
    </member>
    <member name="P:ModernWpf.Controls.ContentDialog.SecondaryButtonCommandParameter">
      <summary>Gets or sets the parameter to pass to the command for the secondary button.</summary>
      <returns>The command parameter for the secondary button. The default is null.</returns>
    </member>
    <member name="F:ModernWpf.Controls.ContentDialog.SecondaryButtonCommandParameterProperty">
      <summary>Gets the identifier of the SecondaryButtonCommandParameter dependency property.</summary>
      <returns>The identifier of the SecondaryButtonCommandParameter dependency property.</returns>
    </member>
    <member name="F:ModernWpf.Controls.ContentDialog.SecondaryButtonCommandProperty">
      <summary>Gets the identifier of the SecondaryButtonCommand dependency property.</summary>
      <returns>The identifier of the SecondaryButtonCommand dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.ContentDialog.SecondaryButtonStyle">
      <summary>Gets or sets the Style to apply to the dialog's secondary button.</summary>
      <returns>The applied style for the button, if present; otherwise, **null**.</returns>
    </member>
    <member name="F:ModernWpf.Controls.ContentDialog.SecondaryButtonStyleProperty">
      <summary>Gets the identifier of the SecondaryButtonStyle dependency property.</summary>
      <returns>The identifier of the SecondaryButtonStyle dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.ContentDialog.SecondaryButtonText">
      <summary>Gets or sets the text to be displayed on the secondary button.</summary>
      <returns>The text to be displayed on the secondary button. To hide this button, set the value to **null** or **string.empty**.</returns>
    </member>
    <member name="F:ModernWpf.Controls.ContentDialog.SecondaryButtonTextProperty">
      <summary>Gets the identifier of the SecondaryButtonText dependency property.</summary>
      <returns>The identifier of the SecondaryButtonText dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.ContentDialog.Title">
      <summary>Gets or sets the title of the dialog.</summary>
      <returns>The title of the dialog.</returns>
    </member>
    <member name="F:ModernWpf.Controls.ContentDialog.TitleProperty">
      <summary>Gets the identifier of the Title dependency property.</summary>
      <returns>The identifier of the Title dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.ContentDialog.TitleTemplate">
      <summary>Gets or sets the title template.</summary>
      <returns>The title template.</returns>
    </member>
    <member name="F:ModernWpf.Controls.ContentDialog.TitleTemplateProperty">
      <summary>Gets the identifier of the TitleTemplate dependency property.</summary>
      <returns>The identifier of the TitleTemplate dependency property.</returns>
    </member>
    <member name="E:ModernWpf.Controls.ContentDialog.CloseButtonClick">
      <summary>Occurs after the close button has been tapped.</summary>
    </member>
    <member name="E:ModernWpf.Controls.ContentDialog.Closed">
      <summary>Occurs after the dialog is closed.</summary>
    </member>
    <member name="E:ModernWpf.Controls.ContentDialog.Closing">
      <summary>Occurs after the dialog starts to close, but before it is closed and before the Closed event occurs.</summary>
    </member>
    <member name="E:ModernWpf.Controls.ContentDialog.Opened">
      <summary>Occurs after the dialog is opened.</summary>
    </member>
    <member name="E:ModernWpf.Controls.ContentDialog.PrimaryButtonClick">
      <summary>Occurs after the primary button has been tapped.</summary>
    </member>
    <member name="E:ModernWpf.Controls.ContentDialog.SecondaryButtonClick">
      <summary>Occurs after the secondary button has been tapped.</summary>
    </member>
    <member name="M:ModernWpf.Controls.ContentDialog.Hide">
      <summary>Hides the dialog.</summary>
    </member>
    <member name="M:ModernWpf.Controls.ContentDialog.ShowAsync">
      <summary>Begins an asynchronous operation to show the dialog.</summary>
      <returns>An asynchronous operation showing the dialog. When complete, returns a ContentDialogResult.</returns>
    </member>
    <member name="M:ModernWpf.Controls.ContentDialog.ShowAsync(ModernWpf.Controls.ContentDialogPlacement)">
      <summary>Begins an asynchronous operation to show the dialog with the specified placement.</summary>
      <param name="placement">A value that specifies whether the dialog is placed in the PopupRoot or in its parent's visual tree.</param>
      <returns>An asynchronous operation showing the dialog. When complete, returns a ContentDialogResult.</returns>
    </member>
    <member name="T:ModernWpf.Controls.ContentDialogButton">
      <summary>Defines constants that specify the default button on a content dialog.</summary>
    </member>
    <member name="F:ModernWpf.Controls.ContentDialogButton.Close">
      <summary>The close button is the default.</summary>
    </member>
    <member name="F:ModernWpf.Controls.ContentDialogButton.None">
      <summary>No button is specified as the default.</summary>
    </member>
    <member name="F:ModernWpf.Controls.ContentDialogButton.Primary">
      <summary>The primary button is the default.</summary>
    </member>
    <member name="F:ModernWpf.Controls.ContentDialogButton.Secondary">
      <summary>The secondary button is the default.</summary>
    </member>
    <member name="T:ModernWpf.Controls.ContentDialogButtonClickDeferral">
      <summary>Represents a deferral that can be used by an app to respond asynchronously to a button click event.</summary>
    </member>
    <member name="M:ModernWpf.Controls.ContentDialogButtonClickDeferral.Complete">
      <summary>Notifies the system that the app has finished processing the button click event.</summary>
    </member>
    <member name="T:ModernWpf.Controls.ContentDialogButtonClickEventArgs">
      <summary>Provides data for the button click events.</summary>
    </member>
    <member name="P:ModernWpf.Controls.ContentDialogButtonClickEventArgs.Cancel">
      <summary>Gets or sets a value that can cancel the button click. A **true** value for Cancel cancels the default behavior.</summary>
      <returns>True to cancel the button click; Otherwise, false.</returns>
    </member>
    <member name="M:ModernWpf.Controls.ContentDialogButtonClickEventArgs.GetDeferral">
      <summary>Gets a ContentDialogButtonClickDeferral that the app can use to respond asynchronously to a button click event.</summary>
      <returns>A ContentDialogButtonClickDeferral that the app can use to respond asynchronously to a button click event.</returns>
    </member>
    <member name="T:ModernWpf.Controls.ContentDialogClosedEventArgs">
      <summary>Provides data for the Closed event.</summary>
    </member>
    <member name="P:ModernWpf.Controls.ContentDialogClosedEventArgs.Result">
      <summary>Gets the ContentDialogResult of the button click event.</summary>
      <returns>The result of the button click event.</returns>
    </member>
    <member name="T:ModernWpf.Controls.ContentDialogClosingDeferral">
      <summary>Represents a deferral that can be used by an app to respond asynchronously to the closing event of the ContentDialog.</summary>
    </member>
    <member name="M:ModernWpf.Controls.ContentDialogClosingDeferral.Complete">
      <summary>Notifies the system that the app has finished processing the closing event.</summary>
    </member>
    <member name="T:ModernWpf.Controls.ContentDialogClosingEventArgs">
      <summary>Provides data for the closing event.</summary>
    </member>
    <member name="P:ModernWpf.Controls.ContentDialogClosingEventArgs.Cancel">
      <summary>Gets or sets a value that can cancel the closing of the dialog.. A **true** value for Cancel cancels the default behavior.</summary>
      <returns>True to cancel the closing of the dialog; Otherwise, false.</returns>
    </member>
    <member name="P:ModernWpf.Controls.ContentDialogClosingEventArgs.Result">
      <summary>Gets the ContentDialogResult of the closing event.</summary>
      <returns>The ContentDialogResult of the closing event.</returns>
    </member>
    <member name="M:ModernWpf.Controls.ContentDialogClosingEventArgs.GetDeferral">
      <summary>Gets a ContentDialogClosingDeferral that the app can use to respond asynchronously to the closing event.</summary>
      <returns>A ContentDialogClosingDeferral that the app can use to respond asynchronously to the closing event.</returns>
    </member>
    <member name="T:ModernWpf.Controls.ContentDialogOpenedEventArgs">
      <summary>Provides data for the Opened event.</summary>
    </member>
    <member name="T:ModernWpf.Controls.ContentDialogPlacement">
      <summary>Defines constants that specify where in the XAML visual tree a ContentDialog is rooted.</summary>
    </member>
    <member name="F:ModernWpf.Controls.ContentDialogPlacement.InPlace">
      <summary>If the dialog has a parent element, the dialog is rooted in the parent's visual tree. Otherwise, it falls back to the **Popup** behavior.</summary>
    </member>
    <member name="F:ModernWpf.Controls.ContentDialogPlacement.Popup">
      <summary>The dialog is rooted in the PopupRoot element of the XAML Window.</summary>
    </member>
    <member name="T:ModernWpf.Controls.ContentDialogResult">
      <summary>Specifies identifiers to indicate the return value of a ContentDialog</summary>
    </member>
    <member name="F:ModernWpf.Controls.ContentDialogResult.None">
      <summary>No button was tapped.</summary>
    </member>
    <member name="F:ModernWpf.Controls.ContentDialogResult.Primary">
      <summary>The primary button was tapped by the user.</summary>
    </member>
    <member name="F:ModernWpf.Controls.ContentDialogResult.Secondary">
      <summary>The secondary button was tapped by the user.</summary>
    </member>
    <member name="T:ModernWpf.Controls.ContextFlyoutService">
      <summary>Represents a service that provides static methods to display a context flyout.</summary>
    </member>
    <member name="F:ModernWpf.Controls.ContextFlyoutService.ContextFlyoutProperty">
      <summary>Identifies the ContextFlyoutService.ContextFlyout XAML attached property.</summary>
      <returns>The identifier for the ContextFlyoutService.ContextFlyout XAML attached property.</returns>
    </member>
    <member name="M:ModernWpf.Controls.ContextFlyoutService.GetContextFlyout(System.Windows.FrameworkElement)">
      <summary>Gets the context flyout associated with this element.</summary>
      <param name="element">The object from which the property value is read.</param>
      <returns>The context flyout associated with this element, if any; otherwise, **null**. The default is **null**.</returns>
    </member>
    <member name="M:ModernWpf.Controls.ContextFlyoutService.SetContextFlyout(System.Windows.FrameworkElement)">
      <summary>Sets the context flyout associated with this element.</summary>
      <param name="element">The object to set context flyout on.</param>
      <param name="value">The value to set for context flyout.</param>
    </member>
    <member name="T:ModernWpf.Controls.DropDownButton">
      <summary>Represents a button with a chevron intended to open a menu.</summary>
    </member>
    <member name="M:ModernWpf.Controls.DropDownButton.#ctor">
      <summary>Initializes a new instance of the <see cref="ModernWpf.Controls.DropDownButton?text=DropDownButton" /> class.</summary>
    </member>
    <member name="T:ModernWpf.Controls.ElementAnimator">
      <summary>Represents the base class for components that coordinate the animations of elements that are being conceptually added, repositioned/resized, or removed from the live visual tree.</summary>
    </member>
    <member name="M:ModernWpf.Controls.ElementAnimator.#ctor">
      <summary>Initializes a new instance of the <see cref="ModernWpf.Controls.ElementAnimator?text=ElementAnimator" /> class.</summary>
    </member>
    <member name="E:ModernWpf.Controls.ElementAnimator.BoundsChangeAnimationCompleted">
      <summary>Raised by a derived class to notify the framework that a bounds change animation has completed.</summary>
    </member>
    <member name="M:ModernWpf.Controls.ElementAnimator.HasBoundsChangeAnimation(System.Windows.UIElement,ModernWpf.Controls.AnimationContext,System.Windows.Rect,System.Windows.Rect)">
      <summary>Determines whether a bounds change animation is being provided by this animator.</summary>
      <param name="element">The element to animate.</param>
      <param name="context">Information about the reason for the animation.</param>
      <param name="oldBounds">The old bounds used to arrange the element.</param>
      <param name="newBounds">The new bounds used to arrange the element.</param>
      <returns>true if the animation is being provided by this animator.; otherwise, false.</returns>
    </member>
    <member name="M:ModernWpf.Controls.ElementAnimator.HasBoundsChangeAnimationCore(System.Windows.UIElement,ModernWpf.Controls.AnimationContext,System.Windows.Rect,System.Windows.Rect)">
      <summary>When implemented in a derived class, determines whether a bounds change animation is being provided by this animator.</summary>
      <param name="element">The element to animate.</param>
      <param name="context">Information about the reason for the animation.</param>
      <param name="oldBounds">The old bounds used to arrange the element.</param>
      <param name="newBounds">The new bounds used to arrange the element.</param>
      <returns>true if the animation is being provided by this animator; otherwise, false.</returns>
    </member>
    <member name="P:ModernWpf.Controls.ElementAnimator.HasBoundsChangeAnimationsPending">
      <summary>Gets a value that indicates whether a bounds change animation is pending.</summary>
      <returns>true if a bounds change animation is pending; otherwise, false.</returns>
    </member>
    <member name="M:ModernWpf.Controls.ElementAnimator.HasHideAnimation(System.Windows.UIElement,ModernWpf.Controls.AnimationContext)">
      <summary>Determines whether a hide animation is being provided by this animator.</summary>
      <param name="element">The element to animate.</param>
      <param name="context">Information about the reason for the animation.</param>
      <returns>true if the animation is being provided by this animator; otherwise, false.</returns>
    </member>
    <member name="M:ModernWpf.Controls.ElementAnimator.HasHideAnimationCore(System.Windows.UIElement,ModernWpf.Controls.AnimationContext)">
      <summary>When implemented in a derived class, determines whether a hide animation is being provided by this animator.</summary>
      <param name="element">The element to animate.</param>
      <param name="context">Information about the reason for the animation.</param>
      <returns>true if the animation is being provided by this animator; otherwise, false.</returns>
    </member>
    <member name="P:ModernWpf.Controls.ElementAnimator.HasHideAnimationsPending">
      <summary>Gets a value that indicates whether a hide animation is pending.</summary>
      <returns>true if a hide animation is pending; otherwise, false.</returns>
    </member>
    <member name="M:ModernWpf.Controls.ElementAnimator.HasShowAnimation(System.Windows.UIElement,ModernWpf.Controls.AnimationContext)">
      <summary>Determines whether a show animation is being provided by this animator.</summary>
      <param name="element">The element to animate.</param>
      <param name="context">Information about the reason for the animation.</param>
      <returns>true if the animation is being provided by this animator; otherwise, false.</returns>
    </member>
    <member name="M:ModernWpf.Controls.ElementAnimator.HasShowAnimationCore(System.Windows.UIElement,ModernWpf.Controls.AnimationContext)">
      <summary>When implemented in a derived class, determines whether a show animation is being provided by this animator.</summary>
      <param name="element">The element to animate.</param>
      <param name="context">Information about the reason for the animation.</param>
      <returns>true if the animation is being provided by this animator, false.</returns>
    </member>
    <member name="P:ModernWpf.Controls.ElementAnimator.HasShowAnimationsPending">
      <summary>Gets a value that indicates whether a show animation is pending.</summary>
      <returns>true if a show animation is pending; otherwise, false.</returns>
    </member>
    <member name="E:ModernWpf.Controls.ElementAnimator.HideAnimationCompleted">
      <summary>Raised by a derived class to notify the framework that a hide animation has completed.</summary>
    </member>
    <member name="M:ModernWpf.Controls.ElementAnimator.OnBoundsChangeAnimationCompleted(System.Windows.UIElement)">
      <summary>Called when a bounds changed animation completes.</summary>
      <param name="element">The element that was animated.</param>
    </member>
    <member name="M:ModernWpf.Controls.ElementAnimator.OnElementBoundsChanged(System.Windows.UIElement,ModernWpf.Controls.AnimationContext,System.Windows.Rect,System.Windows.Rect)">
      <summary>Determines whether a bounds changed animation is needed, and prepares the animation if it is.</summary>
      <param name="element">The element to animate.</param>
      <param name="context">Information about the change that is being animated.</param>
      <param name="oldBounds">The old bounds used to arrange the element.</param>
      <param name="newBounds">The new bounds used to arrange the element.</param>
    </member>
    <member name="M:ModernWpf.Controls.ElementAnimator.OnElementHidden(System.Windows.UIElement,ModernWpf.Controls.AnimationContext)">
      <summary>Determines whether a hide animation is needed, and prepares the animation if it is.</summary>
      <param name="element">The element to animate.</param>
      <param name="context">Information about the change that is being animated.</param>
    </member>
    <member name="M:ModernWpf.Controls.ElementAnimator.OnElementShown(System.Windows.UIElement,ModernWpf.Controls.AnimationContext)">
      <summary>Determines whether a show animation is needed, and prepares the animation if it is.</summary>
      <param name="element">The element to animate.</param>
      <param name="context">Information about the change that is being animated.</param>
    </member>
    <member name="M:ModernWpf.Controls.ElementAnimator.OnHideAnimationCompleted(System.Windows.UIElement)">
      <summary>Called when a hide animation completes.</summary>
      <param name="element">The element that was animated.</param>
    </member>
    <member name="M:ModernWpf.Controls.ElementAnimator.OnShowAnimationCompleted(System.Windows.UIElement)">
      <summary>Called when a show animation completes.</summary>
      <param name="element">The element that was animated.</param>
    </member>
    <member name="P:ModernWpf.Controls.ElementAnimator.SharedContext">
      <summary>Gets the union of all animation contexts during the current tick.</summary>
      <returns>The union of all animation contexts during the current tick.</returns>
    </member>
    <member name="E:ModernWpf.Controls.ElementAnimator.ShowAnimationCompleted">
      <summary>Raised by a derived class to notify the framework that a show animation has completed.</summary>
    </member>
    <member name="M:ModernWpf.Controls.ElementAnimator.StartBoundsChangeAnimation(System.Windows.UIElement,ModernWpf.Controls.AnimationContext,System.Windows.Rect,System.Windows.Rect)">
      <summary>Starts the animation to play when the bounds used to arrange an element change.</summary>
      <param name="element">The element to animate.</param>
      <param name="context">Information about the change that is being animated.</param>
      <param name="oldBounds">The old bounds used to arrange the element.</param>
      <param name="newBounds">The new bounds used to arrange the element.</param>
    </member>
    <member name="M:ModernWpf.Controls.ElementAnimator.StartHideAnimation(System.Windows.UIElement,ModernWpf.Controls.AnimationContext)">
      <summary>Starts the animation to play when an element is conceptually removed from the visual tree.</summary>
      <param name="element">The element to animate.</param>
      <param name="context">Information about the change that is being animated.</param>
    </member>
    <member name="M:ModernWpf.Controls.ElementAnimator.StartShowAnimation(System.Windows.UIElement,ModernWpf.Controls.AnimationContext)">
      <summary>Starts the animation to play when an element is conceptually added to the visual tree.</summary>
      <param name="element">The element to animate.</param>
      <param name="context">Information about the change that is being animated.</param>
    </member>
    <member name="T:ModernWpf.Controls.ElementFactory">
      <summary>Represents the base class for components that create and optionally recycle elements for use in a <see cref="ModernWpf.Controls.Layout?text=Layout" />.</summary>
    </member>
    <member name="M:ModernWpf.Controls.ElementFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="ModernWpf.Controls.ElementFactory?text=ElementFactory" /> class.</summary>
    </member>
    <member name="M:ModernWpf.Controls.ElementFactory.GetElement(ModernWpf.Controls.ElementFactoryGetArgs)">
      <summary>Prepares a UIElement to display data.</summary>
      <param name="args">The data to display, and the parent element.</param>
      <returns>A UIElement prepared to display the data specified in the args.</returns>
    </member>
    <member name="M:ModernWpf.Controls.ElementFactory.GetElementCore(ModernWpf.Controls.ElementFactoryGetArgs)">
      <summary>When implemented in a derived class, prepares a UIElement to display data.</summary>
      <param name="args">The data to display, and the parent element.</param>
      <returns>A UIElement prepared to display the data specified in the args.</returns>
    </member>
    <member name="M:ModernWpf.Controls.ElementFactory.RecycleElement(ModernWpf.Controls.ElementFactoryRecycleArgs)">
      <summary>Clears a UIElement to be re-used to display a new data item.</summary>
      <param name="args">The element to recycle, and the parent element.</param>
    </member>
    <member name="M:ModernWpf.Controls.ElementFactory.RecycleElementCore(ModernWpf.Controls.ElementFactoryRecycleArgs)">
      <summary>When implemented in a derived class, clears a UIElement to be re-used to display a new data item.</summary>
      <param name="args">The element to recycle, and the parent element.</param>
    </member>
    <member name="T:ModernWpf.Controls.ElementFactoryGetArgs">
      <summary>Provides data for the <see cref="ModernWpf.Controls.ElementFactory.GetElement(ModernWpf.Controls.ElementFactoryGetArgs)?text=ElementFactory.GetElement" /> method.</summary>
    </member>
    <member name="M:ModernWpf.Controls.ElementFactoryGetArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="ModernWpf.Controls.ElementFactoryGetArgs?text=ElementFactoryGetArgs" /> class.</summary>
    </member>
    <member name="P:ModernWpf.Controls.ElementFactoryGetArgs.Data">
      <summary>Gets or sets the data item to prepare an element for.</summary>
      <returns>The data item to prepare an element for.</returns>
    </member>
    <member name="P:ModernWpf.Controls.ElementFactoryGetArgs.Parent">
      <summary>Gets or sets the parent of the prepared element.</summary>
      <returns>The parent of the prepared element.</returns>
    </member>
    <member name="T:ModernWpf.Controls.ElementFactoryRecycleArgs">
      <summary>Provides data for the <see cref="ModernWpf.Controls.ElementFactory.RecycleElement(ModernWpf.Controls.ElementFactoryRecycleArgs)?text=ElementFactory.RecycleElement" /> method.</summary>
    </member>
    <member name="M:ModernWpf.Controls.ElementFactoryRecycleArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="ModernWpf.Controls.ElementFactoryRecycleArgs?text=ElementFactoryRecycleArgs" /> class.</summary>
    </member>
    <member name="P:ModernWpf.Controls.ElementFactoryRecycleArgs.Element">
      <summary>Gets or sets the element to recycle.</summary>
      <returns>The element to recycle.</returns>
    </member>
    <member name="P:ModernWpf.Controls.ElementFactoryRecycleArgs.Parent">
      <summary>Gets or sets the parent of the recycled element.</summary>
      <returns>The parent of the recycled element.</returns>
    </member>
    <member name="T:ModernWpf.Controls.ElementRealizationOptions">
      <summary>Defines constants that specify whether to suppress automatic recycling of the retrieved element or force creation of a new element.</summary>
    </member>
    <member name="F:ModernWpf.Controls.ElementRealizationOptions.ForceCreate">
      <summary>Creation of a new element is forced.</summary>
    </member>
    <member name="F:ModernWpf.Controls.ElementRealizationOptions.None">
      <summary>No option is specified.</summary>
    </member>
    <member name="F:ModernWpf.Controls.ElementRealizationOptions.SuppressAutoRecycle">
      <summary>The element is ignored by the automatic recycling logic.</summary>
    </member>
    <member name="T:ModernWpf.Controls.FlowLayout">
      <summary>Represents a layout that stacks lines of items. When a line of items is full, items flow to the next line.</summary>
    </member>
    <member name="M:ModernWpf.Controls.FlowLayout.#ctor">
      <summary>Initializes a new instance of the <see cref="ModernWpf.Controls.FlowLayout?text=FlowLayout" /> class.</summary>
    </member>
    <member name="M:ModernWpf.Controls.FlowLayout.GetAnchorForRealizationRect(System.Windows.Size,ModernWpf.Controls.VirtualizingLayoutContext)">
      <summary>Retrives an anchor for a <see cref="ModernWpf.Controls.VirtualizingLayoutContext.RealizationRect?text=RealizationRect" />.</summary>
      <param name="availableSize">The amount of space available.</param>
      <param name="context">The context object that facilitates communication between the layout and its host container.</param>
      <returns>An anchor for the <see cref="ModernWpf.Controls.VirtualizingLayoutContext.RealizationRect?text=RealizationRect" /> of the context parameter.</returns>
    </member>
    <member name="M:ModernWpf.Controls.FlowLayout.GetAnchorForTargetElement(System.Int32,System.Windows.Size,ModernWpf.Controls.VirtualizingLayoutContext)">
      <summary>Retrives an anchor for a target.</summary>
      <param name="targetIndex">The index of the element that is the target of scrolling.</param>
      <param name="availableSize">The amount of space available.</param>
      <param name="context">The context object that facilitates communication between the layout and its host container.</param>
      <returns>The anchor for the target element.</returns>
    </member>
    <member name="M:ModernWpf.Controls.FlowLayout.GetExtent(System.Windows.Size,ModernWpf.Controls.VirtualizingLayoutContext,System.Windows.UIElement,System.Int32,System.Windows.Rect,System.Windows.UIElement,System.Int32,System.Windows.Rect)">
      <summary>Estimates the extent for a specified available size and range of realized items.</summary>
      <param name="availableSize">The available size for the extent.</param>
      <param name="context">The context object that facilitates communication between the layout and its host container.</param>
      <param name="firstRealized">The first realized item in the range.</param>
      <param name="firstRealizedItemIndex">The index of the first realized item in the range.</param>
      <param name="firstRealizedLayoutBounds">The layout bounds of the first realized item in the range.</param>
      <param name="lastRealized">The last realized item in the range.</param>
      <param name="lastRealizedItemIndex">The index of the last realized item in the range.</param>
      <param name="lastRealizedLayoutBounds">The layout bounds of the last realized item in the range.</param>
      <returns>The estimated extent.</returns>
    </member>
    <member name="M:ModernWpf.Controls.FlowLayout.GetMeasureSize(System.Int32,System.Windows.Size)">
      <summary>Retrieves the available size for the element at the given index.</summary>
      <param name="index">The index of the element.</param>
      <param name="availableSize">The amount of space the element can use.</param>
      <returns>The available size for the element.</returns>
    </member>
    <member name="M:ModernWpf.Controls.FlowLayout.GetProvisionalArrangeSize(System.Int32,System.Windows.Size,System.Windows.Size)">
      <summary>Retrieves the size intended to eventually arrange the element.</summary>
      <param name="index">The position of the item in the collection.</param>
      <param name="measureSize">The measure size of the item.</param>
      <param name="desiredSize">The preferred size of the item.</param>
      <returns>The size intended to eventually arrange the element.</returns>
    </member>
    <member name="P:ModernWpf.Controls.FlowLayout.LineAlignment">
      <summary>Gets or sets a value that indicates how items are aligned on the non-scrolling or non-virtualizing axis.</summary>
      <returns>An enumeration value that indicates how items are aligned. The default is Near.</returns>
    </member>
    <member name="F:ModernWpf.Controls.FlowLayout.LineAlignmentProperty">
      <summary>Identifies the <see cref="ModernWpf.Controls.FlowLayout.LineAlignment?text=LineAlignment" /> dependency property.</summary>
      <returns>The identifier for the <see cref="ModernWpf.Controls.FlowLayout.LineAlignment?text=LineAlignment" /> dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.FlowLayout.MinColumnSpacing">
      <summary>Gets or sets the minimum space between items on the horizontal axis.</summary>
      <returns>The minimum space (in pixels) between items on the horizontal axis.</returns>
    </member>
    <member name="F:ModernWpf.Controls.FlowLayout.MinColumnSpacingProperty">
      <summary>Identifies the <see cref="ModernWpf.Controls.FlowLayout.MinColumnSpacing?text=MinColumnSpacing" /> dependency property.</summary>
      <returns>The identifier for the <see cref="ModernWpf.Controls.FlowLayout.MinColumnSpacing?text=MinColumnSpacing" /> dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.FlowLayout.MinRowSpacing">
      <summary>Gets or sets the minimum space between items on the vertical axis.</summary>
      <returns>The minimum space (in pixels) between items on the vertical axis.</returns>
    </member>
    <member name="F:ModernWpf.Controls.FlowLayout.MinRowSpacingProperty">
      <summary>Identifies the <see cref="ModernWpf.Controls.FlowLayout.MinRowSpacing?text=MinRowSpacing" /> dependency property.</summary>
      <returns>The identifier for the <see cref="ModernWpf.Controls.FlowLayout.MinRowSpacing?text=MinRowSpacing" /> dependency property.</returns>
    </member>
    <member name="M:ModernWpf.Controls.FlowLayout.OnElementMeasured(System.Windows.UIElement,System.Int32,System.Windows.Size,System.Windows.Size,System.Windows.Size,System.Windows.Size,ModernWpf.Controls.VirtualizingLayoutContext)">
      <summary>Called when an element has been measured.</summary>
      <param name="element">The measured element.</param>
      <param name="index">The position of the element in the collection.</param>
      <param name="availableSize">The amount of space available for the element.</param>
      <param name="measureSize">The measure size of the element.</param>
      <param name="desiredSize">The preferred size of the element.</param>
      <param name="provisionalArrangeSize">The size intended to eventually arrange the element.</param>
      <param name="context">The context object that facilitates communication between the layout and its host container.</param>
    </member>
    <member name="M:ModernWpf.Controls.FlowLayout.OnLineArranged(System.Int32,System.Int32,System.Double,ModernWpf.Controls.VirtualizingLayoutContext)">
      <summary>Called when a line has been arranged.</summary>
      <param name="startIndex">The index of the first item in the line.</param>
      <param name="countInLine">The number of items in the line.</param>
      <param name="lineSize">The height of the line.</param>
      <param name="context">The context object that facilitates communication between the layout and its host container.</param>
    </member>
    <member name="P:ModernWpf.Controls.FlowLayout.Orientation">
      <summary>Gets or sets the axis along which items are laid out.</summary>
      <returns>One of the enumeration values that specifies the axis along which items are laid out. The default is Vertical.</returns>
    </member>
    <member name="F:ModernWpf.Controls.FlowLayout.OrientationProperty">
      <summary>Identifies the <see cref="ModernWpf.Controls.FlowLayout.Orientation?text=Orientation" /> dependency property.</summary>
      <returns>The identifier for the <see cref="ModernWpf.Controls.FlowLayout.Orientation?text=Orientation" /> dependency property.</returns>
    </member>
    <member name="M:ModernWpf.Controls.FlowLayout.ShouldBreakLine(System.Int32,System.Double)">
      <summary>Determines whether the element at the specified index should be on a new line.</summary>
      <param name="index">The position of the element in the collection.</param>
      <param name="remainingSpace">The amount of space available in the line.</param>
      <returns>true if the item should be placed in a new line; otherwise, false.</returns>
    </member>
    <member name="T:ModernWpf.Controls.FlowLayoutAnchorInfo">
      <summary>Represents information about the position of an anchor element for a FlowLayout.</summary>
    </member>
    <member name="F:ModernWpf.Controls.FlowLayoutAnchorInfo.Index">
      <summary>The position of the anchor element in the collection.</summary>
    </member>
    <member name="F:ModernWpf.Controls.FlowLayoutAnchorInfo.Offset">
      <summary>The offset of the anchor element in the virtualizing direction relative to the viewport.</summary>
    </member>
    <member name="T:ModernWpf.Controls.FlowLayoutLineAlignment">
      <summary>Defines constants that specify how items are aligned on the non-scrolling or non-virtualizing axis.</summary>
    </member>
    <member name="T:ModernWpf.Controls.FlowLayoutState">
      <summary>Represents the state of a FlowLayout.</summary>
    </member>
    <member name="M:ModernWpf.Controls.FlowLayoutState.#ctor">
      <summary>Initializes a new instance of the <see cref="ModernWpf.Controls.FlowLayoutState?text=FlowLayoutState" /> class.</summary>
    </member>
    <member name="T:ModernWpf.Controls.Flyout">
      <summary>Represents a control that displays lightweight UI that is either information, or requires user interaction. Unlike a dialog, a Flyout can be light dismissed by clicking or tapping outside of it, pressing the device’s back button, or pressing the ‘Esc’ key.</summary>
    </member>
    <member name="M:ModernWpf.Controls.Flyout.#ctor">
      <summary>Initializes a new instance of the Flyout class.</summary>
    </member>
    <member name="P:ModernWpf.Controls.Flyout.Content">
      <summary>Gets or sets the content of the Flyout.</summary>
      <returns>The content of the Flyout.</returns>
    </member>
    <member name="F:ModernWpf.Controls.Flyout.ContentProperty">
      <summary>Gets the identifier for the Content dependency property.</summary>
      <returns>The identifier for the Content dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.Flyout.FlyoutPresenterStyle">
      <summary>Gets or sets the Style applied to the Flyout content.</summary>
      <returns>The applied Style for the Flyout content, if present; otherwise, **null**. The default is **null**.</returns>
    </member>
    <member name="F:ModernWpf.Controls.Flyout.FlyoutPresenterStyleProperty">
      <summary>Gets the identifier for the FlyoutPresenterStyle dependency property.</summary>
      <returns>The identifier for the FlyoutPresenterStyle dependency property.</returns>
    </member>
    <member name="T:ModernWpf.Controls.FlyoutPresenter">
      <summary>Displays the content of a Flyout.</summary>
    </member>
    <member name="M:ModernWpf.Controls.FlyoutPresenter.#ctor">
      <summary>Initializes a new instance of the FlyoutPresenter class.</summary>
    </member>
    <member name="T:ModernWpf.Controls.FlyoutService">
      <summary>Represents a service that provides static methods to display a flyout.</summary>
    </member>
    <member name="F:ModernWpf.Controls.FlyoutService.FlyoutProperty">
      <summary>Identifies the FlyoutService.Flyout XAML attached property.</summary>
      <returns>The identifier for the FlyoutService.Flyout XAML attached property.</returns>
    </member>
    <member name="M:ModernWpf.Controls.FlyoutService.GetFlyout(System.Windows.Controls.Button)">
      <summary>Gets the flyout associated with this button.</summary>
      <param name="element">The object from which the property value is read.</param>
      <returns>The flyout associated with this element, if any; otherwise, **null**. The default is **null**.</returns>
    </member>
    <member name="M:ModernWpf.Controls.FlyoutService.SetFlyout(System.Windows.Controls.Button)">
      <summary>Sets the flyout associated with this element.</summary>
      <param name="element">The object to set flyout on.</param>
      <param name="value">The value to set for flyout.</param>
    </member>
    <member name="T:ModernWpf.Controls.GridView">
      <summary>Represents a control that displays data items in rows and columns.</summary>
    </member>
    <member name="M:ModernWpf.Controls.GridView.#ctor">
      <summary>Initializes a new instance of the GridView class.</summary>
    </member>
    <member name="T:ModernWpf.Controls.GridViewHeaderItem">
      <summary>Represents items in the header for grouped data inside a GridView.</summary>
    </member>
    <member name="M:ModernWpf.Controls.GridViewHeaderItem.#ctor">
      <summary>Initializes a new instance of the GridViewHeaderItem class.</summary>
    </member>
    <member name="T:ModernWpf.Controls.GridViewItem">
      <summary>Represents the container for an item in a GridView control.</summary>
    </member>
    <member name="M:ModernWpf.Controls.GridViewItem.#ctor">
      <summary>Initializes a new instance of the GridViewItem class.</summary>
    </member>
    <member name="T:ModernWpf.Controls.HyperlinkButton">
      <summary>Represents a button control that functions as a hyperlink.</summary>
    </member>
    <member name="M:ModernWpf.Controls.HyperlinkButton.#ctor">
      <summary>Initializes a new instance of the HyperlinkButton class.</summary>
    </member>
    <member name="P:ModernWpf.Controls.HyperlinkButton.NavigateUri">
      <summary>Gets or sets the Uniform Resource Identifier (URI) to navigate to when the HyperlinkButton is clicked.</summary>
      <returns>The Uniform Resource Identifier (URI) to navigate to when the HyperlinkButton is clicked.</returns>
    </member>
    <member name="F:ModernWpf.Controls.HyperlinkButton.NavigateUriProperty">
      <summary>Identifies the NavigateUri dependency property.</summary>
      <returns>The identifier for the NavigateUri dependency property.</returns>
    </member>
    <member name="T:ModernWpf.Controls.ICommandBarElement">
      <summary>Defines the compact view for command bar elements.</summary>
    </member>
    <member name="P:ModernWpf.Controls.ICommandBarElement.IsCompact">
      <summary>Gets or sets a value that indicates whether the element is shown with no label and reduced padding.</summary>
      <returns>**true** if the element is shown in its compact state; otherwise, **false**. The default is **false**.</returns>
    </member>
    <member name="T:ModernWpf.Controls.IElementFactory">
      <summary>Supports the creation and recycling of UIElement objects.</summary>
    </member>
    <member name="M:ModernWpf.Controls.IElementFactory.GetElement(ModernWpf.Controls.ElementFactoryGetArgs)">
      <summary>Gets an UIElement object.</summary>
      <param name="args">An instance of ElementFactoryGetArgs.</param>
      <returns>A UIElement object.</returns>
    </member>
    <member name="M:ModernWpf.Controls.IElementFactory.RecycleElement(ModernWpf.Controls.ElementFactoryRecycleArgs)">
      <summary>Recycles a UIElement that was previously retrieved using GetElement.</summary>
      <param name="args">An instance of ElementFactoryRecycleArgs.</param>
    </member>
    <member name="T:ModernWpf.Controls.IKeyIndexMapping">
      <summary>Provides methods that support mapping between an item's unique identifier and index.</summary>
    </member>
    <member name="M:ModernWpf.Controls.IKeyIndexMapping.IndexFromKey(System.String)">
      <summary>Retrieves the index of the item that has the specified unique identifier (key).</summary>
      <param name="key">The unique identifier (key) of the item to find the index of.</param>
      <returns>The index of the item with the specified key.</returns>
    </member>
    <member name="M:ModernWpf.Controls.IKeyIndexMapping.KeyFromIndex(System.Int32)">
      <summary>Retrieves the unique identifier (key) for the item at the specified index.</summary>
      <param name="index">The index of the item to get the key for.</param>
      <returns>The unique identifier (key) for the item at the specified index.</returns>
    </member>
    <member name="T:ModernWpf.Controls.IScrollAnchorProvider">
      <summary>Specifies a contract for a scrolling control that supports scroll anchoring.</summary>
    </member>
    <member name="P:ModernWpf.Controls.IScrollAnchorProvider.CurrentAnchor">
      <summary>The currently chosen anchor element to use for scroll anchoring.</summary>
      <returns>The most recently chosen UIElement for scroll anchoring after a layout pass, or **null**.</returns>
    </member>
    <member name="M:ModernWpf.Controls.IScrollAnchorProvider.RegisterAnchorCandidate(System.Windows.UIElement)">
      <summary>Registers a UIElement as a potential scroll anchor candidate.</summary>
      <param name="element">A UIElement within the subtree of the IScrollAnchorProvider.</param>
    </member>
    <member name="M:ModernWpf.Controls.IScrollAnchorProvider.UnregisterAnchorCandidate(System.Windows.UIElement)">
      <summary>Unregisters a UIElement as a potential scroll anchor candidate.</summary>
      <param name="element">A UIElement within the subtree of the IScrollAnchorProvider.</param>
    </member>
    <member name="T:ModernWpf.Controls.ItemClickEventArgs">
      <summary>Provides event data for the ItemClick event.</summary>
    </member>
    <member name="M:ModernWpf.Controls.ItemClickEventArgs.#ctor">
      <summary>Initializes a new instance of the ItemClickEventArgs class.</summary>
    </member>
    <member name="P:ModernWpf.Controls.ItemClickEventArgs.ClickedItem">
      <summary>Gets a reference to the clicked item.</summary>
      <returns>The clicked item.</returns>
    </member>
    <member name="T:ModernWpf.Controls.ItemClickEventHandler">
      <summary>Represents the method that will handle an ItemClick event.</summary>
      <param name="sender">The object where the handler is attached.</param>
      <param name="e">Event data for the event.</param>
    </member>
    <member name="T:ModernWpf.Controls.ItemsRepeater">
      <summary>Represents a data-driven collection control that incorporates a flexible layout system, custom views, and virtualization.</summary>
    </member>
    <member name="M:ModernWpf.Controls.ItemsRepeater.#ctor">
      <summary>Initializes a new instance of the <see cref="ModernWpf.Controls.ItemsRepeater?text=ItemsRepeater" /> class.</summary>
    </member>
    <member name="P:ModernWpf.Controls.ItemsRepeater.Animator">
      <summary>Gets or sets an element animator that manages animating the items in the layout.</summary>
      <returns>An element animator that manages animating the items in the layout.</returns>
    </member>
    <member name="F:ModernWpf.Controls.ItemsRepeater.AnimatorProperty">
      <summary>Identifies the <see cref="ModernWpf.Controls.ItemsRepeater.Animator?text=Animator" /> dependency property.</summary>
      <returns>The identifier for the <see cref="ModernWpf.Controls.ItemsRepeater.Animator?text=Animator" /> dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.ItemsRepeater.Background">
      <summary>Gets or sets a brush that provides the background of the control.</summary>
      <returns>The brush that provides the background of the control. The default is null, (a null brush) which is evaluated as Transparent for rendering.</returns>
    </member>
    <member name="F:ModernWpf.Controls.ItemsRepeater.BackgroundProperty">
      <summary>Identifies the <see cref="ModernWpf.Controls.ItemsRepeater.Background?text=Background" /> dependency property.</summary>
      <returns>The identifier for the <see cref="ModernWpf.Controls.ItemsRepeater.Background?text=Background" /> dependency property.</returns>
    </member>
    <member name="E:ModernWpf.Controls.ItemsRepeater.ElementClearing">
      <summary>Occurs each time an element is cleared and made available to be re-used.</summary>
    </member>
    <member name="E:ModernWpf.Controls.ItemsRepeater.ElementIndexChanged">
      <summary>Occurs for each realized UIElement when the index for the item it represents has changed.</summary>
    </member>
    <member name="E:ModernWpf.Controls.ItemsRepeater.ElementPrepared">
      <summary>Occurs each time an element is prepared for use.</summary>
    </member>
    <member name="M:ModernWpf.Controls.ItemsRepeater.GetElementIndex(System.Windows.UIElement)">
      <summary>Retrieves the index of the item from the data source that corresponds to the specified UIElement.</summary>
      <param name="element">The element that corresponds to the item to get the index of.</param>
      <returns>The index of the item from the data source that corresponds to the specified UIElement, or -1 if the element is not supported.</returns>
    </member>
    <member name="M:ModernWpf.Controls.ItemsRepeater.GetOrCreateElement(System.Int32)">
      <summary>Retrieves the UIElement that corresponds to the item at the specified index in the data source.</summary>
      <param name="index">The index of the item.</param>
      <returns>A UIElement that corresponds to the item at the specified index. If the item is not realized, a new UIElement is created.</returns>
    </member>
    <member name="P:ModernWpf.Controls.ItemsRepeater.HorizontalCacheLength">
      <summary>Gets or sets a value that indicates the size of the buffer used to realize items when panning or scrolling horizontally.</summary>
      <returns>A non-negative value that indicates the size of the buffer as a multiple of the viewport size. The default value is determined by the system.</returns>
    </member>
    <member name="F:ModernWpf.Controls.ItemsRepeater.HorizontalCacheLengthProperty">
      <summary>Identifies the <see cref="ModernWpf.Controls.ItemsRepeater.HorizontalCacheLength?text=HorizontalCacheLength" /> dependency property.</summary>
      <returns>The identifier for the <see cref="ModernWpf.Controls.ItemsRepeater.HorizontalCacheLength?text=HorizontalCacheLength" /> dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.ItemsRepeater.ItemsSource">
      <summary>Gets or sets an object source used to generate the content of the ItemsRepeater.</summary>
      <returns>The object that is used to generate the content of the ItemsRepeater. The default is null.</returns>
    </member>
    <member name="F:ModernWpf.Controls.ItemsRepeater.ItemsSourceProperty">
      <summary>Identifies the <see cref="ModernWpf.Controls.ItemsRepeater.ItemsSource?text=ItemsSource" /> dependency property.</summary>
      <returns>The identifier for the <see cref="ModernWpf.Controls.ItemsRepeater.ItemsSource?text=ItemsSource" /> dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.ItemsRepeater.ItemsSourceView">
      <summary>Gets a standardized view of the supported interactions between a given ItemsSource object and the ItemsRepeater control and its associated components.</summary>
      <returns>A standardized view of the supported interactions between an ItemsSource object and the ItemsRepeater.</returns>
    </member>
    <member name="P:ModernWpf.Controls.ItemsRepeater.ItemTemplate">
      <summary>Gets or sets the template used to display each item.</summary>
      <returns>The template that specifies the visualization of the data objects. The default is null.</returns>
    </member>
    <member name="F:ModernWpf.Controls.ItemsRepeater.ItemTemplateProperty">
      <summary>Identifies the <see cref="ModernWpf.Controls.ItemsRepeater.ItemTemplate?text=ItemTemplate" /> dependency property.</summary>
      <returns>The identifier for the <see cref="ModernWpf.Controls.ItemsRepeater.ItemTemplate?text=ItemTemplate" /> dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.ItemsRepeater.Layout">
      <summary>Gets or sets the layout used to size and position elements in the ItemsRepeater.</summary>
      <returns>The layout used to size and position elements. The default is a <see cref="ModernWpf.Controls.StackLayout?text=StackLayout" /> with vertical orientation.</returns>
    </member>
    <member name="F:ModernWpf.Controls.ItemsRepeater.LayoutProperty">
      <summary>Identifies the <see cref="ModernWpf.Controls.ItemsRepeater.Layout?text=Layout" /> dependency property.</summary>
      <returns>The identifier for the <see cref="ModernWpf.Controls.ItemsRepeater.Layout?text=Layout" /> dependency property.</returns>
    </member>
    <member name="M:ModernWpf.Controls.ItemsRepeater.TryGetElement(System.Int32)">
      <summary>Retrieves the realized UIElement that corresponds to the item at the specified index in the data source.</summary>
      <param name="index">The index of the item.</param>
      <returns>The UIElement that corresponds to the item at the specified index if the item is realized, or null if the item is not realized.</returns>
    </member>
    <member name="P:ModernWpf.Controls.ItemsRepeater.VerticalCacheLength">
      <summary>Gets or sets a value that indicates the size of the buffer used to realize items when panning or scrolling vertically.</summary>
      <returns>A non-negative value that indicates the size of the buffer as a multiple of the viewport size. The default value is determined by the system.</returns>
    </member>
    <member name="F:ModernWpf.Controls.ItemsRepeater.VerticalCacheLengthProperty">
      <summary>Identifies the <see cref="ModernWpf.Controls.ItemsRepeater.VerticalCacheLength?text=VerticalCacheLength" /> dependency property.</summary>
      <returns>The identifier for the <see cref="ModernWpf.Controls.ItemsRepeater.VerticalCacheLength?text=VerticalCacheLength" /> dependency property.</returns>
    </member>
    <member name="T:ModernWpf.Controls.ItemsRepeaterElementClearingEventArgs">
      <summary>Provides data for the ItemsRepeater.ElementClearing event.</summary>
    </member>
    <member name="P:ModernWpf.Controls.ItemsRepeaterElementClearingEventArgs.Element">
      <summary>Gets the element that is being cleared for re-use.</summary>
      <returns>The element that is being cleared.</returns>
    </member>
    <member name="T:ModernWpf.Controls.ItemsRepeaterElementIndexChangedEventArgs">
      <summary>Provides data for the ItemsRepeater.ElementIndexChanged event.</summary>
    </member>
    <member name="P:ModernWpf.Controls.ItemsRepeaterElementIndexChangedEventArgs.Element">
      <summary>Get the element for which the index changed.</summary>
      <returns>The element for which the index changed.</returns>
    </member>
    <member name="P:ModernWpf.Controls.ItemsRepeaterElementIndexChangedEventArgs.NewIndex">
      <summary>Gets the index of the element after the change.</summary>
      <returns>The index of the element after the change.</returns>
    </member>
    <member name="P:ModernWpf.Controls.ItemsRepeaterElementIndexChangedEventArgs.OldIndex">
      <summary>Gets the index of the element before the change.</summary>
      <returns>The index of the element before the change.</returns>
    </member>
    <member name="T:ModernWpf.Controls.ItemsRepeaterElementPreparedEventArgs">
      <summary>Provides data for the ItemsRepeater.ElementPrepared event.</summary>
    </member>
    <member name="P:ModernWpf.Controls.ItemsRepeaterElementPreparedEventArgs.Element">
      <summary>Gets the prepared element.</summary>
      <returns>The prepared element.</returns>
    </member>
    <member name="P:ModernWpf.Controls.ItemsRepeaterElementPreparedEventArgs.Index">
      <summary>Gets the index of the item the element was prepared for.</summary>
      <returns>The index of the item the element was prepared for.</returns>
    </member>
    <member name="T:ModernWpf.Controls.ItemsRepeaterScrollHost">
      <summary>A helper to coordinate interaction between the <see cref="ModernWpf.Controls.ItemsRepeater?text=ItemsRepeater" /> and ScrollViewer.
Use the ItemsRepeaterScrollHost if your app will run on versions of Windows prior Windows 10 1809 (Build 17763).  If your app will only run on versions of Windows 1809 or higher, there is no need to use this control.</summary>
    </member>
    <member name="M:ModernWpf.Controls.ItemsRepeaterScrollHost.#ctor" />
    <member name="P:ModernWpf.Controls.ItemsRepeaterScrollHost.CurrentAnchor">
      <summary>The currently chosen anchor element to use for scroll anchoring.</summary>
      <returns>The most recently chosen UIElement for scroll anchoring after a layout pass, or null.</returns>
    </member>
    <member name="P:ModernWpf.Controls.ItemsRepeaterScrollHost.HorizontalAnchorRatio">
      <summary>Determines the horizontal position of the ScrollViewer's anchor point with respect to the viewport. By default, the ScrollViewer selects an element as its <see cref="ModernWpf.Controls.ItemsRepeaterScrollHost.CurrentAnchor?text=CurrentAnchor" /> by identifying the element in its viewport nearest to the anchor point.</summary>
      <returns>A normalized value (0.0 to 1.0). The default is 0.0.</returns>
    </member>
    <member name="P:ModernWpf.Controls.ItemsRepeaterScrollHost.ScrollViewer">
      <summary>Gets or sets the ScrollViewer to host.</summary>
      <returns>A ScrollViewer that contains one or more <see cref="ModernWpf.Controls.ItemsRepeater?text=ItemsRepeater" /> controls.</returns>
    </member>
    <member name="P:ModernWpf.Controls.ItemsRepeaterScrollHost.VerticalAnchorRatio">
      <summary>Determines the vertical position of the ScrollViewer's anchor point with respect to the viewport. By default, the ScrollViewer selects an element as its CurrentAnchor by identifying the element in its viewport nearest to the anchor point.</summary>
      <returns>A normalized value (0.0 to 1.0). The default is 0.0.</returns>
    </member>
    <member name="T:ModernWpf.Controls.ItemsSourceView">
      <summary>Represents a standardized view of the supported interactions between a given ItemsSource object and an ItemsRepeater control.</summary>
    </member>
    <member name="M:ModernWpf.Controls.ItemsSourceView.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="ModernWpf.Controls.ItemsSourceView?text=ItemsSourceView" /> class for the specified data source.</summary>
      <param name="source">The data source for this view.</param>
    </member>
    <member name="E:ModernWpf.Controls.ItemsSourceView.CollectionChanged">
      <summary>Occurs when the collection has changed to indicate the reason for the change and which items changed.</summary>
    </member>
    <member name="P:ModernWpf.Controls.ItemsSourceView.Count">
      <summary>Gets the number of items in the collection.</summary>
      <returns>The number of items in the collection.</returns>
    </member>
    <member name="M:ModernWpf.Controls.ItemsSourceView.GetAt(System.Int32)">
      <summary>Retrieves the item at the specified index.</summary>
      <param name="index">The index of the item to retrieve.</param>
      <returns>The item at the specified index.</returns>
    </member>
    <member name="P:ModernWpf.Controls.ItemsSourceView.HasKeyIndexMapping">
      <summary>Gets a value that indicates whether the items source can provide a unique key for each item.</summary>
      <returns>true if the items source can provide a unique key for each item; otherwise, false.</returns>
    </member>
    <member name="M:ModernWpf.Controls.ItemsSourceView.IndexFromKey(System.String)">
      <summary>Retrieves the index of the item that has the specified unique identifier (key).</summary>
      <param name="key">The unique identifier (key) of the item to find the index of.</param>
      <returns>The index of the item with the specified key.</returns>
    </member>
    <member name="M:ModernWpf.Controls.ItemsSourceView.KeyFromIndex(System.Int32)">
      <summary>Retrieves the unique identifier (key) for the item at the specified index.</summary>
      <param name="index">The index of the item to get the key for.</param>
      <returns>The unique identifier (key) for the item at the specified index.</returns>
    </member>
    <member name="T:ModernWpf.Controls.Layout">
      <summary>Represents the base class for an object that sizes and arranges child elements for a host.</summary>
    </member>
    <member name="M:ModernWpf.Controls.Layout.Arrange(ModernWpf.Controls.LayoutContext,System.Windows.Size)">
      <summary>Positions child elements and determines a size for a container UIElement. Container elements that support attached layouts should call this method from their layout override implementations to form a recursive layout update.</summary>
      <param name="context">The context object that facilitates communication between the layout and its host container.</param>
      <param name="finalSize">The final size that the container computes for the child in layout.</param>
      <returns>The actual size that is used after the element is arranged in layout.</returns>
    </member>
    <member name="E:ModernWpf.Controls.Layout.ArrangeInvalidated">
      <summary>Occurs when the arrange state (layout) has been invalidated.</summary>
    </member>
    <member name="M:ModernWpf.Controls.Layout.InitializeForContext(ModernWpf.Controls.LayoutContext)">
      <summary>Initializes any per-container state the layout requires when it is attached to a UIElement container.</summary>
      <param name="context">The context object that facilitates communication between the layout and its host container.</param>
    </member>
    <member name="M:ModernWpf.Controls.Layout.InvalidateArrange">
      <summary>Invalidates the arrange state (layout) for all UIElement containers that reference this layout. After the invalidation, the UIElement will have its layout updated, which occurs asynchronously.</summary>
    </member>
    <member name="M:ModernWpf.Controls.Layout.InvalidateMeasure">
      <summary>Invalidates the measurement state (layout) for all UIElement containers that reference this layout.</summary>
    </member>
    <member name="M:ModernWpf.Controls.Layout.Measure(ModernWpf.Controls.LayoutContext,System.Windows.Size)">
      <summary>Suggests a DesiredSize for a container element. A container element that supports attached layouts should call this method from their own MeasureOverride implementations to form a recursive layout update. The attached layout is expected to call the Measure for each of the container’s UIElement children.</summary>
      <param name="context">The context object that facilitates communication between the layout and its host container.</param>
      <param name="availableSize">The available space that a container can allocate to a child object. A child object can request a larger space than what is available; the provided size might be accommodated if scrolling or other resize behavior is possible in that particular container.</param>
      <returns>The size that this object determines it needs during layout, based on its calculations of the allocated sizes for child objects or based on other considerations such as a fixed container size.</returns>
    </member>
    <member name="E:ModernWpf.Controls.Layout.MeasureInvalidated">
      <summary>Occurs when the measurement state (layout) has been invalidated.</summary>
    </member>
    <member name="M:ModernWpf.Controls.Layout.UninitializeForContext(ModernWpf.Controls.LayoutContext)">
      <summary>Removes any state the layout previously stored on the UIElement container.</summary>
      <param name="context">The context object that facilitates communication between the layout and its host container.</param>
    </member>
    <member name="T:ModernWpf.Controls.LayoutContext">
      <summary>Represents the base class for an object that facilitates communication between an attached layout and its host container.</summary>
    </member>
    <member name="P:ModernWpf.Controls.LayoutContext.LayoutState">
      <summary>Gets or sets an object that represents the state of a layout.</summary>
      <returns>An object that represents the state of a layout.</returns>
    </member>
    <member name="P:ModernWpf.Controls.LayoutContext.LayoutStateCore">
      <summary>Implements the behavior of <see cref="ModernWpf.Controls.LayoutContext.LayoutState?text=LayoutState" /> in a derived or custom LayoutContext.</summary>
      <returns>The value that should be returned as <see cref="ModernWpf.Controls.LayoutContext.LayoutState?text=LayoutState" /> by the LayoutContext.</returns>
    </member>
    <member name="T:ModernWpf.Controls.LayoutPanel">
      <summary>Represents a container that uses an attached layout object to size and position its child elements.</summary>
    </member>
    <member name="M:ModernWpf.Controls.LayoutPanel.#ctor">
      <summary>Initializes a new instance of the <see cref="ModernWpf.Controls.LayoutPanel?text=LayoutPanel" /> class.</summary>
    </member>
    <member name="P:ModernWpf.Controls.LayoutPanel.BorderBrush">
      <summary>Gets or sets a brush that describes the fill of the panel border.</summary>
      <returns>The brush that is used to fill the panel's border. The default is null, (a null brush) which is evaluated as Transparent for rendering.</returns>
    </member>
    <member name="F:ModernWpf.Controls.LayoutPanel.BorderBrushProperty">
      <summary>Identifies the <see cref="ModernWpf.Controls.LayoutPanel.BorderBrush?text=BorderBrush" /> dependency property.</summary>
      <returns>The identifier for the <see cref="ModernWpf.Controls.LayoutPanel.BorderBrush?text=BorderBrush" /> dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.LayoutPanel.BorderThickness">
      <summary>Gets or sets the thickness of the panel border.</summary>
      <returns>The thickness of the panel border.</returns>
    </member>
    <member name="F:ModernWpf.Controls.LayoutPanel.BorderThicknessProperty">
      <summary>Identifies the <see cref="ModernWpf.Controls.LayoutPanel.BorderThickness?text=BorderThickness" /> dependency property.</summary>
      <returns>The identifier for the <see cref="ModernWpf.Controls.LayoutPanel.BorderThickness?text=BorderThickness" /> dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.LayoutPanel.CornerRadius">
      <summary>Gets or sets the radius for the corners of the panel border.</summary>
      <returns>The degree to which the corners are rounded, expressed as values of the CornerRadius structure.</returns>
    </member>
    <member name="F:ModernWpf.Controls.LayoutPanel.CornerRadiusProperty">
      <summary>Identifies the <see cref="ModernWpf.Controls.LayoutPanel.CornerRadius?text=CornerRadius" /> dependency property.</summary>
      <returns>The identifier for the <see cref="ModernWpf.Controls.LayoutPanel.CornerRadius?text=CornerRadius" /> dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.LayoutPanel.Layout">
      <summary>Gets or sets the layout used to size and position elements in the panel.</summary>
      <returns>The attached layout used to size and position elements.</returns>
    </member>
    <member name="F:ModernWpf.Controls.LayoutPanel.LayoutProperty">
      <summary>Identifies the <see cref="ModernWpf.Controls.LayoutPanel.Layout?text=Layout" /> dependency property.</summary>
      <returns>The identifier for the <see cref="ModernWpf.Controls.LayoutPanel.Layout?text=Layout" /> dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.LayoutPanel.Padding">
      <summary>Gets or sets the distance between the border and the panel content.</summary>
      <returns>The dimensions of the space between the border and the panel content. Thickness is a structure that stores dimension values using pixel measures.</returns>
    </member>
    <member name="F:ModernWpf.Controls.LayoutPanel.PaddingProperty">
      <summary>Identifies the <see cref="ModernWpf.Controls.LayoutPanel.Padding?text=Padding" /> dependency property.</summary>
      <returns>The identifier for the <see cref="ModernWpf.Controls.LayoutPanel.Padding?text=Padding" /> dependency property.</returns>
    </member>
    <member name="T:ModernWpf.Controls.LightDismissOverlayMode">
      <summary>Defines constants that specify whether the area outside of a *light-dismiss* UI is darkened.</summary>
    </member>
    <member name="F:ModernWpf.Controls.LightDismissOverlayMode.Auto">
      <summary>The device-family the app is running on determines whether the area outside of a *light-dismiss* UI is darkened.</summary>
    </member>
    <member name="F:ModernWpf.Controls.LightDismissOverlayMode.Off">
      <summary>The area outside of a *light-dismiss* UI is not darkened for all device families.</summary>
    </member>
    <member name="F:ModernWpf.Controls.LightDismissOverlayMode.On">
      <summary>The area outside of a *light-dismiss* UI is darkened for all device families.</summary>
    </member>
    <member name="T:ModernWpf.Controls.ListView">
      <summary>Represents a control that displays data items in a vertical stack.</summary>
    </member>
    <member name="M:ModernWpf.Controls.ListView.#ctor">
      <summary>Initializes a new instance of the ListView class.</summary>
    </member>
    <member name="T:ModernWpf.Controls.ListViewBase">
      <summary>Provides the infrastructure for the ListView and GridView classes.</summary>
    </member>
    <member name="M:ModernWpf.Controls.ListViewBase.#ctor">
      <summary>Provides base-class initialization behavior for classes that are derived from the ListViewBase class.</summary>
    </member>
    <member name="P:ModernWpf.Controls.ListViewBase.IsItemClickEnabled">
      <summary>Gets or sets a value that indicates whether items in the view fire an ItemClick event in response to interaction.</summary>
      <returns>**true** if interaction fires an ItemClick event; otherwise, **false**. The default is **false**.</returns>
    </member>
    <member name="F:ModernWpf.Controls.ListViewBase.IsItemClickEnabledProperty">
      <summary>Identifies the IsItemClickEnabled dependency property.</summary>
      <returns>The identifier for the IsItemClickEnabled dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.ListViewBase.IsMultiSelectCheckBoxEnabled">
      <summary>Gets or sets a value that indicates whether a check box is shown to enable multi-selection.</summary>
      <returns>**true** if a check box is shown to enable multi-selection; otherwise, **false**.</returns>
    </member>
    <member name="F:ModernWpf.Controls.ListViewBase.IsMultiSelectCheckBoxEnabledProperty">
      <summary>Get the identifier for the IsMultiSelectCheckBoxEnabled dependency property.</summary>
      <returns>The identifier for the IsMultiSelectCheckBoxEnabled dependency property.</returns>
    </member>
    <member name="E:ModernWpf.Controls.ListViewBase.ItemClick">
      <summary>Occurs when an item in the list view receives an interaction, and the IsItemClickEnabled property is **true**.</summary>
    </member>
    <member name="T:ModernWpf.Controls.ListViewItem">
      <summary>Represents the container for an item in a ListView control.</summary>
    </member>
    <member name="M:ModernWpf.Controls.ListViewItem.#ctor">
      <summary>Initializes a new instance of the ListViewItem class.</summary>
    </member>
    <member name="T:ModernWpf.Controls.MenuFlyout">
      <summary>Represents a flyout that displays a menu of commands.</summary>
    </member>
    <member name="M:ModernWpf.Controls.MenuFlyout.#ctor">
      <summary>Initializes a new instance of the MenuFlyout class.</summary>
    </member>
    <member name="P:ModernWpf.Controls.MenuFlyout.Items">
      <summary>Gets the collection used to generate the content of the menu.</summary>
      <returns>The collection that is used to generate the content of the menu, if it exists; otherwise, **null**. The default is an empty collection.</returns>
    </member>
    <member name="P:ModernWpf.Controls.MenuFlyout.MenuFlyoutPresenterStyle">
      <summary>Gets or sets the style that is used when rendering the MenuFlyout.</summary>
      <returns>The style that is used when rendering the MenuFlyout.</returns>
    </member>
    <member name="F:ModernWpf.Controls.MenuFlyout.MenuFlyoutPresenterStyleProperty">
      <summary>Identifies the MenuFlyoutPresenterStyle dependency property.</summary>
      <returns>The identifier for the MenuFlyoutPresenterStyle dependency property.</returns>
    </member>
    <member name="T:ModernWpf.Controls.MenuFlyoutPresenter">
      <summary>Displays the content of a MenuFlyout control.</summary>
    </member>
    <member name="M:ModernWpf.Controls.MenuFlyoutPresenter.#ctor">
      <summary>Initializes a new instance of the MenuFlyoutPresenter class.</summary>
    </member>
    <member name="P:ModernWpf.Controls.MenuFlyoutPresenter.IsDefaultShadowEnabled">
      <summary>Gets or sets a value that indicates whether the default shadow effect is shown.</summary>
      <returns>**true** if the default shadow effect is shown; otherwise, **false**. The default is **true**.</returns>
    </member>
    <member name="F:ModernWpf.Controls.MenuFlyoutPresenter.IsDefaultShadowEnabledProperty">
      <summary>Identifies the IsDefaultShadowEnabled dependency property.</summary>
      <returns>The identifier for the IsDefaultShadowEnabled dependency property.</returns>
    </member>
    <member name="T:ModernWpf.Controls.NavigationView">
      <summary>Represents a container that enables navigation of app content. It has a header, a view for the main content, and a menu pane for navigation commands.</summary>
    </member>
    <member name="M:ModernWpf.Controls.NavigationView.#ctor">
      <summary>Initializes a new instance of the NavigationView class.</summary>
    </member>
    <member name="P:ModernWpf.Controls.NavigationView.AlwaysShowHeader">
      <summary>Gets or sets a value that indicates whether the header is always visible.</summary>
      <returns>true if the header is always visible; otherwise, false.</returns>
    </member>
    <member name="F:ModernWpf.Controls.NavigationView.AlwaysShowHeaderProperty">
      <summary>Identifies the AlwaysShowHeader dependency property.</summary>
      <returns>The identifier for the AlwaysShowHeader dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.NavigationView.AutoSuggestBox">
      <summary>Gets or sets an AutoSuggestBox to be displayed in the NavigationView.</summary>
      <returns>An AutoSuggestBox box to be displayed in the NavigationView.</returns>
    </member>
    <member name="F:ModernWpf.Controls.NavigationView.AutoSuggestBoxProperty">
      <summary>Identifies the AutoSuggestBox dependency property.</summary>
      <returns>The identifier for the AutoSuggestBox dependency property.</returns>
    </member>
    <member name="E:ModernWpf.Controls.NavigationView.BackRequested">
      <summary>Occurs when the back button receives an interaction such as a click or tap.</summary>
    </member>
    <member name="P:ModernWpf.Controls.NavigationView.CompactModeThresholdWidth">
      <summary>Gets or sets the minimum window width at which the NavigationView enters Compact display mode.</summary>
      <returns>The minimum window width at which the NavigationView enters Compact display mode. The default is 641 pixels.</returns>
    </member>
    <member name="F:ModernWpf.Controls.NavigationView.CompactModeThresholdWidthProperty">
      <summary>Identifies the CompactModeThresholdWidth dependency property.</summary>
      <returns>The identifier for the CompactModeThresholdWidth dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.NavigationView.CompactPaneLength">
      <summary>Gets or sets the width of the NavigationView pane in its compact display mode.</summary>
      <returns>The width of the pane in its compact display mode. The default is 48 device-independent pixel (DIP).</returns>
    </member>
    <member name="F:ModernWpf.Controls.NavigationView.CompactPaneLengthProperty">
      <summary>Identifies the CompactPaneLength dependency property.</summary>
      <returns>The identifier for the CompactPaneLength dependency property.</returns>
    </member>
    <member name="M:ModernWpf.Controls.NavigationView.ContainerFromMenuItem(System.Object)">
      <summary>Returns the container corresponding to the specified menu item.</summary>
      <param name="item">The menu item to retrieve the container for.</param>
      <returns>A container that corresponds to the specified menu item, if the item has a container and exists in the collection; otherwise, null.</returns>
    </member>
    <member name="P:ModernWpf.Controls.NavigationView.ContentOverlay">
      <summary>Gets or sets a UI element that is shown at the top of the control, below the pane if PaneDisplayMode is Top.</summary>
      <returns>The element that is shown at the top of the control.</returns>
    </member>
    <member name="F:ModernWpf.Controls.NavigationView.ContentOverlayProperty">
      <summary>Identifies the ContentOverlay dependency property.</summary>
      <returns>The identifier for the ContentOverlay dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.NavigationView.DisplayMode">
      <summary>Gets a value that specifies how the pane and content areas of a NavigationView are being shown.</summary>
      <returns>A value of the enumeration that specifies how the pane and content areas of a NavigationView are being shown.</returns>
    </member>
    <member name="E:ModernWpf.Controls.NavigationView.DisplayModeChanged">
      <summary>Occurs when the DisplayMode property changes.</summary>
    </member>
    <member name="F:ModernWpf.Controls.NavigationView.DisplayModeProperty">
      <summary>Identifies the DisplayMode dependency property.</summary>
      <returns>The identifier for the DisplayMode dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.NavigationView.ExpandedModeThresholdWidth">
      <summary>Gets or sets the minimum window width at which the NavigationView enters Expanded display mode.</summary>
      <returns>The minimum window width at which the NavigationView enters Expanded display mode. The default is 1008 pixels.</returns>
    </member>
    <member name="F:ModernWpf.Controls.NavigationView.ExpandedModeThresholdWidthProperty">
      <summary>Identifies the ExpandedModeThresholdWidth dependency property.</summary>
      <returns>The identifier for the ExpandedModeThresholdWidth dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.NavigationView.Header">
      <summary>Gets or sets the header content.</summary>
      <returns>The header content for the NavigationView.</returns>
    </member>
    <member name="F:ModernWpf.Controls.NavigationView.HeaderProperty">
      <summary>Identifies the Header dependency property.</summary>
      <returns>The identifier for the Header dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.NavigationView.HeaderTemplate">
      <summary>Gets or sets the DataTemplate used to display the control's header.</summary>
      <returns>The DataTemplate used to display the control's header.</returns>
    </member>
    <member name="F:ModernWpf.Controls.NavigationView.HeaderTemplateProperty">
      <summary>Identifies the HeaderTemplate dependency property.</summary>
      <returns>The identifier for the HeaderTemplate dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.NavigationView.IsBackButtonVisible">
      <summary>Gets or sets a value that indicates whether the back button is enabled or disabled.</summary>
      <returns>A value of the enumeration that specifies the visibility of the NavigationView back button. The default is "Auto".</returns>
    </member>
    <member name="F:ModernWpf.Controls.NavigationView.IsBackButtonVisibleProperty">
      <summary>Identifies the IsBackButtonVisible dependency property.</summary>
      <returns>The identifier for the IsBackButtonVisible dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.NavigationView.IsBackEnabled">
      <summary>Gets or sets a value that indicates whether the back button is enabled or disabled.</summary>
      <returns>true if the back button is enabled; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:ModernWpf.Controls.NavigationView.IsBackEnabledProperty">
      <summary>Identifies the IsBackEnabled dependency property.</summary>
      <returns>The identifier for the IsBackEnabled dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.NavigationView.IsPaneOpen">
      <summary>Gets or sets a value that specifies whether the NavigationView pane is expanded to its full width.</summary>
      <returns>true if the pane is expanded to its full width; otherwise, false.</returns>
    </member>
    <member name="F:ModernWpf.Controls.NavigationView.IsPaneOpenProperty">
      <summary>Identifies the IsPaneOpen dependency property.</summary>
      <returns>The identifier for the IsPaneOpen dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.NavigationView.IsPaneToggleButtonVisible">
      <summary>Gets or sets a value that indicates whether the menu toggle button is shown.</summary>
      <returns>true if the menu button is shown; otherwise, false. The default is true.</returns>
    </member>
    <member name="F:ModernWpf.Controls.NavigationView.IsPaneToggleButtonVisibleProperty">
      <summary>Identifies the IsPaneToggleButtonVisible dependency property.</summary>
      <returns>The identifier for the IsPaneToggleButtonVisible dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.NavigationView.IsPaneVisible">
      <summary>Gets or sets a value that determines whether the pane is shown.</summary>
      <returns>true is the pane is shown; otherwise, false. The default is true.</returns>
    </member>
    <member name="F:ModernWpf.Controls.NavigationView.IsPaneVisibleProperty">
      <summary>Identifies the IsPaneVisible dependency property.</summary>
      <returns>The identifier for the IsPaneVisible dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.NavigationView.IsSettingsVisible">
      <summary>Gets or sets a value that indicates whether the settings button is shown.</summary>
      <returns>true if the settings button is shown; otherwise, false. The default is true.</returns>
    </member>
    <member name="F:ModernWpf.Controls.NavigationView.IsSettingsVisibleProperty">
      <summary>Identifies the IsSettingsVisible dependency property.</summary>
      <returns>The identifier for the IsSettingsVisible dependency property.</returns>
    </member>
    <member name="E:ModernWpf.Controls.NavigationView.ItemInvoked">
      <summary>Occurs when an item in the menu receives an interaction such a a click or tap.</summary>
    </member>
    <member name="P:ModernWpf.Controls.NavigationView.MenuItemContainerStyle">
      <summary>Gets or sets the style that is used when rendering the menu item containers.</summary>
      <returns>The style applied to the item containers. The default is null.</returns>
    </member>
    <member name="F:ModernWpf.Controls.NavigationView.MenuItemContainerStyleProperty">
      <summary>Identifies the MenuItemContainerStyle dependency property.</summary>
      <returns>The identifier for the MenuItemContainerStyle dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.NavigationView.MenuItemContainerStyleSelector">
      <summary>Gets or sets a reference to a custom StyleSelector logic class. The StyleSelector returns different Style values to use for the item container based on characteristics of the object being displayed.</summary>
      <returns>A custom StyleSelector logic class.</returns>
    </member>
    <member name="F:ModernWpf.Controls.NavigationView.MenuItemContainerStyleSelectorProperty">
      <summary>Identifies the MenuItemContainerStyleSelector dependency property.</summary>
      <returns>The identifier for the MenuItemContainerStyleSelector dependency property.</returns>
    </member>
    <member name="M:ModernWpf.Controls.NavigationView.MenuItemFromContainer(System.Windows.DependencyObject)">
      <summary>Returns the item that corresponds to the specified, generated container.</summary>
      <param name="container">The DependencyObject that corresponds to the item to be returned.</param>
      <returns>The contained item, or the container if it does not contain an item.</returns>
    </member>
    <member name="P:ModernWpf.Controls.NavigationView.MenuItems">
      <summary>Gets the collection of menu items displayed in the NavigationMenu.</summary>
      <returns>The collection of menu items displayed in the NavigationMenu. The default is an empty collection.</returns>
    </member>
    <member name="F:ModernWpf.Controls.NavigationView.MenuItemsProperty">
      <summary>Identifies the MenuItems dependency property.</summary>
      <returns>The identifier for the MenuItems dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.NavigationView.MenuItemsSource">
      <summary>Gets or sets an object source used to generate the content of the NavigationView menu.</summary>
      <returns>The object that is used to generate the content of the NavigationView menu. The default is null.</returns>
    </member>
    <member name="F:ModernWpf.Controls.NavigationView.MenuItemsSourceProperty">
      <summary>Identifies the MenuItemsSource dependency property.</summary>
      <returns>The identifier for the MenuItemsSource dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.NavigationView.MenuItemTemplate">
      <summary>Gets or sets the DataTemplate used to display each menu item.</summary>
      <returns>The template that specifies the visualization of the menu data objects. The default is null.</returns>
    </member>
    <member name="F:ModernWpf.Controls.NavigationView.MenuItemTemplateProperty">
      <summary>Identifies the MenuItemTemplate dependency property.</summary>
      <returns>The identifier for the MenuItemTemplate dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.NavigationView.MenuItemTemplateSelector">
      <summary>Gets or sets a reference to a custom DataTemplateSelector logic class. The DataTemplateSelector referenced by this property returns a template to apply to items.</summary>
      <returns>A reference to a custom DataTemplateSelector logic class.</returns>
    </member>
    <member name="F:ModernWpf.Controls.NavigationView.MenuItemTemplateSelectorProperty">
      <summary>Identifies the MenuItemTemplateSelector dependency property.</summary>
      <returns>The identifier for the MenuItemTemplateSelector dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.NavigationView.OpenPaneLength">
      <summary>Gets or sets the width of the NavigationView pane when it's fully expanded.</summary>
      <returns>The width of the NavigationView pane when it's fully expanded. The default is 320 device-independent pixel (DIP).</returns>
    </member>
    <member name="F:ModernWpf.Controls.NavigationView.OpenPaneLengthProperty">
      <summary>Identifies the OpenPaneLength dependency property.</summary>
      <returns>The identifier for the OpenPaneLength dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.NavigationView.OverflowLabelMode">
      <summary>Gets or sets a value that indicates what text label is shown for the overflow menu.</summary>
      <returns>A value of the enumeration that indicates what text label is shown for the overflow menu. The default is MoreLabel, which shows the text "More".</returns>
    </member>
    <member name="F:ModernWpf.Controls.NavigationView.OverflowLabelModeProperty">
      <summary>Identifies the OverflowLabelMode dependency property.</summary>
      <returns>The identifier for the OverflowLabelMode dependency property.</returns>
    </member>
    <member name="E:ModernWpf.Controls.NavigationView.PaneClosed">
      <summary>Occurs when the NavigationView pane is closed.</summary>
    </member>
    <member name="E:ModernWpf.Controls.NavigationView.PaneClosing">
      <summary>Occurs when the NavigationView pane is closing.</summary>
    </member>
    <member name="P:ModernWpf.Controls.NavigationView.PaneCustomContent">
      <summary>Gets or sets a UI element that is shown in the NavigationView pane.</summary>
      <returns>The element that is shown in the NavigationView pane.</returns>
    </member>
    <member name="F:ModernWpf.Controls.NavigationView.PaneCustomContentProperty">
      <summary>Identifies the PaneCustomContent dependency property.</summary>
      <returns>The identifier for the PaneCustomContent dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.NavigationView.PaneDisplayMode">
      <summary>Gets or sets a value that indicates how and where the NavigationView pane is shown.</summary>
      <returns>A value of the enumeration that indicates how and where the NavigationView pane is shown. The default is Auto.</returns>
    </member>
    <member name="F:ModernWpf.Controls.NavigationView.PaneDisplayModeProperty">
      <summary>Identifies the PaneDisplayMode dependency property.</summary>
      <returns>The identifier for the PaneDisplayMode dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.NavigationView.PaneFooter">
      <summary>Gets or sets the content for the pane footer.</summary>
      <returns>The content of the pane footer. The default is null.</returns>
    </member>
    <member name="F:ModernWpf.Controls.NavigationView.PaneFooterProperty">
      <summary>Identifies the PaneFooter dependency property.</summary>
      <returns>The identifier for the PaneFooter dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.NavigationView.PaneHeader">
      <summary>Gets or sets the content for the pane header.</summary>
      <returns>The content of the pane header. The default is null.</returns>
    </member>
    <member name="F:ModernWpf.Controls.NavigationView.PaneHeaderProperty">
      <summary>Identifies the PaneHeader dependency property.</summary>
      <returns>The identifier for the PaneHeader dependency property.</returns>
    </member>
    <member name="E:ModernWpf.Controls.NavigationView.PaneOpened">
      <summary>Occurs when the NavigationView pane is opened.</summary>
    </member>
    <member name="E:ModernWpf.Controls.NavigationView.PaneOpening">
      <summary>Occurs when the NavigationView pane is opening.</summary>
    </member>
    <member name="P:ModernWpf.Controls.NavigationView.PaneTitle">
      <summary>Gets or sets the label adjacent to the menu icon when the NavigationView pane is open.</summary>
      <returns>The label adjacent to the menu icon when the pane is open. The default is an empty string.</returns>
    </member>
    <member name="F:ModernWpf.Controls.NavigationView.PaneTitleProperty">
      <summary>Identifies the PaneTitle dependency property.</summary>
      <returns>The identifier for the PaneTitle dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.NavigationView.PaneToggleButtonStyle">
      <summary>Gets or sets the Style that defines the look of the menu toggle button.</summary>
      <returns>The Style that defines the look of the menu toggle button. The default is null.</returns>
    </member>
    <member name="F:ModernWpf.Controls.NavigationView.PaneToggleButtonStyleProperty">
      <summary>Identifies the PaneToggleButtonStyle dependency property.</summary>
      <returns>The identifier for the PaneToggleButtonStyle dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.NavigationView.SelectedItem">
      <summary>Gets or sets the selected item.</summary>
      <returns>The selected item. The default is null.</returns>
    </member>
    <member name="F:ModernWpf.Controls.NavigationView.SelectedItemProperty">
      <summary>Identifies the SelectedItem dependency property.</summary>
      <returns>The identifier for the SelectedItem dependency property.</returns>
    </member>
    <member name="E:ModernWpf.Controls.NavigationView.SelectionChanged">
      <summary>Occurs when the currently selected item changes.</summary>
    </member>
    <member name="P:ModernWpf.Controls.NavigationView.SelectionFollowsFocus">
      <summary>Gets or sets a value that indicates whether item selection changes when keyboard focus changes.</summary>
      <returns>A value of the enumeration that indicates whether selection changes when keyboard focus changes. The default is Disabled.</returns>
    </member>
    <member name="F:ModernWpf.Controls.NavigationView.SelectionFollowsFocusProperty">
      <summary>Identifies the SelectionFollowsFocus dependency property.</summary>
      <returns>The identifier for the SelectionFollowsFocus dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.NavigationView.SettingsItem">
      <summary>Gets the navigation item that represents the entry point to app settings.</summary>
      <returns>The item that represents the entry point to app settings.</returns>
    </member>
    <member name="F:ModernWpf.Controls.NavigationView.SettingsItemProperty">
      <summary>Identifies the SettingsItem dependency property.</summary>
      <returns>The identifier for the SettingsItem dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.NavigationView.ShoulderNavigationEnabled">
      <summary>Gets or sets a value that indicates when gamepad bumpers can be used to navigate the top-level navigation items in a NavigationView.</summary>
      <returns>A value of the enumeration that indicates when gamepad bumpers can be used to navigate the top-level navigation items in a NavigationView. The default is Never.</returns>
    </member>
    <member name="F:ModernWpf.Controls.NavigationView.ShoulderNavigationEnabledProperty">
      <summary>Identifies the ShoulderNavigationEnabled dependency property.</summary>
      <returns>The identifier for the ShoulderNavigationEnabled dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.NavigationView.TemplateSettings">
      <summary>Gets an object that provides calculated values that can be referenced as TemplateBinding sources when defining templates for a NavigationView control.</summary>
      <returns>An object that provides calculated values for templates.</returns>
    </member>
    <member name="F:ModernWpf.Controls.NavigationView.TemplateSettingsProperty">
      <summary>Identifies the TemplateSettings dependency property.</summary>
      <returns>The identifier for the TemplateSettings dependency property.</returns>
    </member>
    <member name="T:ModernWpf.Controls.NavigationViewBackButtonVisible">
      <summary>Defines constants that specify whether the back button is visible in NavigationView.</summary>
    </member>
    <member name="F:ModernWpf.Controls.NavigationViewBackButtonVisible.Auto">
      <summary>The system chooses whether or not to display the back button, depending on the device/form factor. On phones, tablets, desktops, and hubs, the back button is visible. On Xbox/TV, the back button is collapsed.</summary>
    </member>
    <member name="F:ModernWpf.Controls.NavigationViewBackButtonVisible.Collapsed">
      <summary>Do not display the back button in NavigationView, and do not reserve space for it in layout.</summary>
    </member>
    <member name="F:ModernWpf.Controls.NavigationViewBackButtonVisible.Visible">
      <summary>Display the back button in NavigationView.</summary>
    </member>
    <member name="T:ModernWpf.Controls.NavigationViewBackRequestedEventArgs">
      <summary>Provides event data for the <see cref="ModernWpf.Controls.NavigationView.BackRequested?text=NavigationView.BackRequested" /> event.</summary>
    </member>
    <member name="T:ModernWpf.Controls.NavigationViewDisplayMode">
      <summary>Defines constants that specify how the pane is shown in a NavigationView.</summary>
    </member>
    <member name="F:ModernWpf.Controls.NavigationViewDisplayMode.Compact">
      <summary>The pane always shows as a narrow sliver which can be opened to full width.</summary>
    </member>
    <member name="F:ModernWpf.Controls.NavigationViewDisplayMode.Expanded">
      <summary>The pane stays open alongside the content.</summary>
    </member>
    <member name="F:ModernWpf.Controls.NavigationViewDisplayMode.Minimal">
      <summary>Only the menu button remains fixed. The pane shows and hides as needed.</summary>
    </member>
    <member name="T:ModernWpf.Controls.NavigationViewDisplayModeChangedEventArgs">
      <summary>Provides data for the <see cref="ModernWpf.Controls.NavigationView.DisplayModeChanged?text=NavigationView.DisplayModeChanged" /> event.</summary>
    </member>
    <member name="P:ModernWpf.Controls.NavigationViewDisplayModeChangedEventArgs.DisplayMode">
      <summary>Gets the new display mode.</summary>
      <returns>The new display mode.</returns>
    </member>
    <member name="T:ModernWpf.Controls.NavigationViewItem">
      <summary>Represents the container for an item in a <see cref="ModernWpf.Controls.NavigationView?text=NavigationView" /> control.</summary>
    </member>
    <member name="M:ModernWpf.Controls.NavigationViewItem.#ctor">
      <summary>Initializes a new instance of the NavigationViewItem class.</summary>
    </member>
    <member name="P:ModernWpf.Controls.NavigationViewItem.CompactPaneLength">
      <summary>Gets the <see cref="ModernWpf.Controls.NavigationView.CompactPaneLength?text=CompactPaneLength" /> of the NavigationView that hosts this item.</summary>
      <returns>The <see cref="ModernWpf.Controls.NavigationView.CompactPaneLength?text=CompactPaneLength" /> of the NavigationView that hosts this item.</returns>
    </member>
    <member name="F:ModernWpf.Controls.NavigationViewItem.CompactPaneLengthProperty">
      <summary>Identifies the CompactPaneLength dependency property.</summary>
      <returns>The identifier for the CompactPaneLength dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.NavigationViewItem.Icon">
      <summary>Gets or sets the icon to show next to the menu item text.</summary>
      <returns>The icon to show next to the menu item text. The default in null.</returns>
    </member>
    <member name="F:ModernWpf.Controls.NavigationViewItem.IconProperty">
      <summary>Identifies the Icon dependency property.</summary>
      <returns>The identifier for the Icon dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.NavigationViewItem.SelectsOnInvoked">
      <summary>Gets or sets a value that indicates whether invoking a navigation menu item also selects it.</summary>
      <returns>true if invoking a navigation menu item also selects it; otherwise, false. The default is true.</returns>
    </member>
    <member name="F:ModernWpf.Controls.NavigationViewItem.SelectsOnInvokedProperty">
      <summary>Identifies the SelectsOnInvoked dependency property.</summary>
      <returns>The identifier for the SelectsOnInvoked dependency property.</returns>
    </member>
    <member name="T:ModernWpf.Controls.NavigationViewItemBase">
      <summary>Base class for <see cref="ModernWpf.Controls.NavigationView?text=NavigationView" /> menu items.</summary>
    </member>
    <member name="T:ModernWpf.Controls.NavigationViewItemHeader">
      <summary>Represents a header for a group of menu items in a NavigationMenu.</summary>
    </member>
    <member name="M:ModernWpf.Controls.NavigationViewItemHeader.#ctor">
      <summary>Initializes a new instance of the NavigationViewItemHeader class.</summary>
    </member>
    <member name="T:ModernWpf.Controls.NavigationViewItemInvokedEventArgs">
      <summary>Provides event data for the <see cref="ModernWpf.Controls.NavigationView.ItemInvoked?text=NavigationView.ItemInvoked" /> event.</summary>
    </member>
    <member name="M:ModernWpf.Controls.NavigationViewItemInvokedEventArgs.#ctor">
      <summary>Initializes a new instance of the NavigationViewItemInvokedEventArgs class.</summary>
    </member>
    <member name="P:ModernWpf.Controls.NavigationViewItemInvokedEventArgs.InvokedItem">
      <summary>Gets a reference to the invoked item.</summary>
      <returns>The invoked item.</returns>
    </member>
    <member name="P:ModernWpf.Controls.NavigationViewItemInvokedEventArgs.InvokedItemContainer">
      <summary>Gets the container for the invoked item.</summary>
      <returns>The container for the invoked item.</returns>
    </member>
    <member name="P:ModernWpf.Controls.NavigationViewItemInvokedEventArgs.IsSettingsInvoked">
      <summary>Gets a value that indicates whether the InvokedItem is the menu item for Settings.</summary>
      <returns>true if the InvokedItem is the menu item for Settings; otherwise, false.</returns>
    </member>
    <member name="P:ModernWpf.Controls.NavigationViewItemInvokedEventArgs.RecommendedNavigationTransitionInfo">
      <summary>Gets the navigation transition recommended for the direction of the navigation.</summary>
      <returns>The navigation transition recommended for the direction of the navigation.</returns>
    </member>
    <member name="T:ModernWpf.Controls.NavigationViewItemSeparator">
      <summary>Represents a line that separates menu items in a NavigationMenu.</summary>
    </member>
    <member name="M:ModernWpf.Controls.NavigationViewItemSeparator.#ctor">
      <summary>Initializes a new instance of the NavigationViewItemSeparator class.</summary>
    </member>
    <member name="T:ModernWpf.Controls.NavigationViewList">
      <summary>Represents a control that displays menu items in a <see cref="ModernWpf.Controls.NavigationView?text=NavigationView" /> control.</summary>
    </member>
    <member name="M:ModernWpf.Controls.NavigationViewList.#ctor">
      <summary>Initializes a new instance of the NavigationViewList class.</summary>
    </member>
    <member name="T:ModernWpf.Controls.NavigationViewOverflowLabelMode">
      <summary>Defines constants that specify the label for the overflow button in a NavigationView.</summary>
    </member>
    <member name="F:ModernWpf.Controls.NavigationViewOverflowLabelMode.MoreLabel">
      <summary>The text label "More" is shown next to the chevron.</summary>
    </member>
    <member name="F:ModernWpf.Controls.NavigationViewOverflowLabelMode.NoLabel">
      <summary>No text label is shown, only a chevron.</summary>
    </member>
    <member name="T:ModernWpf.Controls.NavigationViewPaneClosingEventArgs">
      <summary>Provides data for the <see cref="ModernWpf.Controls.NavigationView.PaneClosing?text=NavigationView.PaneClosing" /> event.</summary>
    </member>
    <member name="P:ModernWpf.Controls.NavigationViewPaneClosingEventArgs.Cancel">
      <summary>Gets or sets a value that indicates whether the event should be canceled.</summary>
      <returns>true to cancel the event; otherwise, false. The default is false.</returns>
    </member>
    <member name="T:ModernWpf.Controls.NavigationViewPaneDisplayMode">
      <summary>Defines constants that specify how and where the NavigationView pane is shown.</summary>
    </member>
    <member name="F:ModernWpf.Controls.NavigationViewPaneDisplayMode.Auto">
      <summary>The pane is shown on the left side of the control, and changes between minimal, compact, and full states depending on the width of the window.</summary>
    </member>
    <member name="F:ModernWpf.Controls.NavigationViewPaneDisplayMode.Left">
      <summary>The pane is shown on the left side of the control in its fully open state.</summary>
    </member>
    <member name="F:ModernWpf.Controls.NavigationViewPaneDisplayMode.LeftCompact">
      <summary>The pane is shown on the left side of the control. Only the pane icons are shown by default.</summary>
    </member>
    <member name="F:ModernWpf.Controls.NavigationViewPaneDisplayMode.LeftMinimal">
      <summary>The pane is shown on the left side of the control. Only the pane menu button is shown by default.</summary>
    </member>
    <member name="F:ModernWpf.Controls.NavigationViewPaneDisplayMode.Top">
      <summary>The pane is shown at the top of the control.</summary>
    </member>
    <member name="T:ModernWpf.Controls.NavigationViewSelectionChangedEventArgs">
      <summary>Provides data for the <see cref="ModernWpf.Controls.NavigationView.SelectionChanged?text=NavigationView.SelectionChanged" /> event.</summary>
    </member>
    <member name="P:ModernWpf.Controls.NavigationViewSelectionChangedEventArgs.IsSettingsSelected">
      <summary>Gets a value that indicates whether the SelectedItem is the menu item for Settings.</summary>
      <returns>true if the SelectedItem is the menu item for Settings; otherwise, false.</returns>
    </member>
    <member name="P:ModernWpf.Controls.NavigationViewSelectionChangedEventArgs.RecommendedNavigationTransitionInfo">
      <summary>Gets the navigation transition recommended for the direction of the navigation.</summary>
      <returns>The navigation transition recommended for the direction of the navigation.</returns>
    </member>
    <member name="P:ModernWpf.Controls.NavigationViewSelectionChangedEventArgs.SelectedItem">
      <summary>Gets the newly selected menu item.</summary>
      <returns>The newly selected menu item.</returns>
    </member>
    <member name="P:ModernWpf.Controls.NavigationViewSelectionChangedEventArgs.SelectedItemContainer">
      <summary>Gets the container for the selected item.</summary>
      <returns>The container for the selected item.</returns>
    </member>
    <member name="T:ModernWpf.Controls.NavigationViewSelectionFollowsFocus">
      <summary>Defines constants that specify whether item selection changes when keyboard focus changes in a NavigationView.</summary>
    </member>
    <member name="F:ModernWpf.Controls.NavigationViewSelectionFollowsFocus.Disabled">
      <summary>Selection does not change when keyboard focus changes.</summary>
    </member>
    <member name="F:ModernWpf.Controls.NavigationViewSelectionFollowsFocus.Enabled">
      <summary>Selection changes when keyboard focus changes.</summary>
    </member>
    <member name="T:ModernWpf.Controls.NavigationViewShoulderNavigationEnabled">
      <summary>Defines constants that specify when gamepad bumpers can be used to navigate the top-level navigation items in a NavigationView.</summary>
    </member>
    <member name="F:ModernWpf.Controls.NavigationViewShoulderNavigationEnabled.Always">
      <summary>Gamepad bumpers always navigate the top-level navigation items.</summary>
    </member>
    <member name="F:ModernWpf.Controls.NavigationViewShoulderNavigationEnabled.Never">
      <summary>Gamepad bumpers never navigate the top-level navigation items.</summary>
    </member>
    <member name="F:ModernWpf.Controls.NavigationViewShoulderNavigationEnabled.WhenSelectionFollowsFocus">
      <summary>Gamepad bumpers navigate the top-level navigation items when the SelectionFollowsFocus property is Enabled.</summary>
    </member>
    <member name="T:ModernWpf.Controls.NavigationViewTemplateSettings">
      <summary>Provides calculated values that can be referenced as TemplatedParent sources when defining templates for a <see cref="ModernWpf.Controls.NavigationView?text=NavigationView" />. Not intended for general use.</summary>
    </member>
    <member name="M:ModernWpf.Controls.NavigationViewTemplateSettings.#ctor">
      <summary>Initializes a new instance of the <see cref="ModernWpf.Controls.NavigationViewTemplateSettings?text=NavigationViewTemplateSettings" /> class.</summary>
    </member>
    <member name="P:ModernWpf.Controls.NavigationViewTemplateSettings.BackButtonVisibility">
      <summary>Gets the visibility of the back button.</summary>
      <returns>The visibility of the back button.</returns>
    </member>
    <member name="F:ModernWpf.Controls.NavigationViewTemplateSettings.BackButtonVisibilityProperty">
      <summary>Identifies the BackButtonVisibility dependency property.</summary>
      <returns>The identifier for the BackButtonVisibility dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.NavigationViewTemplateSettings.LeftPaneVisibility">
      <summary>Gets the visibility of the left pane.</summary>
      <returns>The visibility of the left pane.</returns>
    </member>
    <member name="F:ModernWpf.Controls.NavigationViewTemplateSettings.LeftPaneVisibilityProperty">
      <summary>Identifies the LeftPaneVisibility dependency property.</summary>
      <returns>The identifier for the LeftPaneVisibility dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.NavigationViewTemplateSettings.OverflowButtonVisibility">
      <summary>Gets the visibility of the overflow button.</summary>
      <returns>The visibility of the overflow button.</returns>
    </member>
    <member name="F:ModernWpf.Controls.NavigationViewTemplateSettings.OverflowButtonVisibilityProperty">
      <summary>Identifies the OverflowButtonVisibility dependency property.</summary>
      <returns>The identifier for the OverflowButtonVisibility dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.NavigationViewTemplateSettings.PaneToggleButtonVisibility">
      <summary>Gets the visibility of the pane toggle button.</summary>
      <returns>The visibility of the pane toggle button.</returns>
    </member>
    <member name="F:ModernWpf.Controls.NavigationViewTemplateSettings.PaneToggleButtonVisibilityProperty">
      <summary>Identifies the PaneToggleButtonVisibility dependency property.</summary>
      <returns>The identifier for the PaneToggleButtonVisibility dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.NavigationViewTemplateSettings.SingleSelectionFollowsFocus">
      <summary>Gets the <see cref="ModernWpf.Controls.NavigationView.SelectionFollowsFocus?text=SelectionFollowsFocus" /> value.</summary>
      <returns>The SelectionFollowsFocus value.</returns>
    </member>
    <member name="F:ModernWpf.Controls.NavigationViewTemplateSettings.SingleSelectionFollowsFocusProperty">
      <summary>Identifies the SingleSelectionFollowsFocus dependency property.</summary>
      <returns>The identifier for the SingleSelectionFollowsFocus dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.NavigationViewTemplateSettings.TopPadding">
      <summary>Gets the padding value of the top pane.</summary>
      <returns>The padding value of the top pane.</returns>
    </member>
    <member name="F:ModernWpf.Controls.NavigationViewTemplateSettings.TopPaddingProperty">
      <summary>Identifies the TopPadding dependency property.</summary>
      <returns>The identifier for the TopPadding dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.NavigationViewTemplateSettings.TopPaneVisibility">
      <summary>Gets the visibility of the top pane.</summary>
      <returns>The visibility of the top pane.</returns>
    </member>
    <member name="F:ModernWpf.Controls.NavigationViewTemplateSettings.TopPaneVisibilityProperty">
      <summary>Identifies the TopPaneVisibility dependency property.</summary>
      <returns>The identifier for the TopPaneVisibility dependency property.</returns>
    </member>
    <member name="T:ModernWpf.Controls.NonVirtualizingLayout">
      <summary>Represents the base class for an object that sizes and arranges child elements for a host and and does not support virtualization.</summary>
    </member>
    <member name="M:ModernWpf.Controls.NonVirtualizingLayout.#ctor">
      <summary>Initializes a new instance of the <see cref="ModernWpf.Controls.NonVirtualizingLayout?text=NonVirtualizingLayout" /> class.</summary>
    </member>
    <member name="M:ModernWpf.Controls.NonVirtualizingLayout.ArrangeOverride(ModernWpf.Controls.NonVirtualizingLayoutContext,System.Windows.Size)">
      <summary>When implemented in a derived class, provides the behavior for the "Arrange" pass of layout. Classes can override this method to define their own "Arrange" pass behavior.</summary>
      <param name="context">The context object that facilitates communication between the layout and its host container.</param>
      <param name="finalSize">The final area within the container that this object should use to arrange itself and its children.</param>
      <returns>The actual size that is used after the element is arranged in layout.</returns>
    </member>
    <member name="M:ModernWpf.Controls.NonVirtualizingLayout.InitializeForContextCore(ModernWpf.Controls.NonVirtualizingLayoutContext)">
      <summary>When overridden in a derived class, initializes any per-container state the layout requires when it is attached to a UIElement container.</summary>
      <param name="context">The context object that facilitates communication between the layout and its host container.</param>
    </member>
    <member name="M:ModernWpf.Controls.NonVirtualizingLayout.MeasureOverride(ModernWpf.Controls.NonVirtualizingLayoutContext,System.Windows.Size)">
      <summary>Provides the behavior for the "Measure" pass of the layout cycle. Classes can override this method to define their own "Measure" pass behavior.</summary>
      <param name="context">The context object that facilitates communication between the layout and its host container.</param>
      <param name="availableSize">The available size that this object can give to child objects. Infinity can be specified as a value to indicate that the object will size to whatever content is available.</param>
      <returns>The size that this object determines it needs during layout, based on its calculations of the allocated sizes for child objects or based on other considerations such as a fixed container size.</returns>
    </member>
    <member name="M:ModernWpf.Controls.NonVirtualizingLayout.UninitializeForContextCore(ModernWpf.Controls.NonVirtualizingLayoutContext)">
      <summary>When overridden in a derived class, removes any state the layout previously stored on the UIElement container.</summary>
      <param name="context">The context object that facilitates communication between the layout and its host container.</param>
    </member>
    <member name="T:ModernWpf.Controls.NonVirtualizingLayoutContext">
      <summary>Represents the base class for layout context types that do not support virtualization.</summary>
    </member>
    <member name="M:ModernWpf.Controls.NonVirtualizingLayoutContext.#ctor">
      <summary>Initializes a new instance of the <see cref="ModernWpf.Controls.NonVirtualizingLayoutContext?text=NonVirtualizingLayoutContext" /> class.</summary>
    </member>
    <member name="P:ModernWpf.Controls.NonVirtualizingLayoutContext.Children">
      <summary>Gets the collection of child UIElements from the container that provides the context.</summary>
      <returns>The collection of child elements from the container that provides the context.</returns>
    </member>
    <member name="P:ModernWpf.Controls.NonVirtualizingLayoutContext.ChildrenCore">
      <summary>Implements the behavior for getting the return value of <see cref="ModernWpf.Controls.NonVirtualizingLayoutContext.Children?text=Children" /> in a derived or custom NonVirtualizingLayoutContext.</summary>
      <returns>The value that should be returned as <see cref="ModernWpf.Controls.NonVirtualizingLayoutContext.Children?text=Children" /> by the NonVirtualizingLayoutContext.</returns>
    </member>
    <member name="T:ModernWpf.Controls.PersonPicture">
      <summary>Represents a control that displays the avatar image for a person, if one is available; if not, it displays the person's initials or a generic glyph.</summary>
    </member>
    <member name="M:ModernWpf.Controls.PersonPicture.#ctor">
      <summary>Initializes a new instance of the PersonPicture class.</summary>
    </member>
    <member name="P:ModernWpf.Controls.PersonPicture.BadgeGlyph">
      <summary>Gets or sets a Segoe MDL2 Assets font glyph to display on the badge.</summary>
      <returns>The hexadecimal character code for the badge glyph.</returns>
    </member>
    <member name="F:ModernWpf.Controls.PersonPicture.BadgeGlyphProperty">
      <summary>Identifies the BadgeGlyph dependency property.</summary>
      <returns>The identifier for the BadgeGlyph dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.PersonPicture.BadgeImageSource">
      <summary>Gets or sets the source of an image to display on the badge.</summary>
      <returns>An object that represents the image source file for the drawn image. Typically you set this with a BitmapImage object, constructed with the Uniform Resource Identifier (URI) that describes the path to a valid image source file. Or, you can initialize a BitmapSource with a stream, perhaps a stream from a storage file.</returns>
    </member>
    <member name="F:ModernWpf.Controls.PersonPicture.BadgeImageSourceProperty">
      <summary>Identifies the BadgeImageSource dependency property.</summary>
      <returns>The identifier for the BadgeImageSource dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.PersonPicture.BadgeNumber">
      <summary>Gets or sets the contact number to display on the badge.</summary>
      <returns>The contact number to display on the badge.</returns>
    </member>
    <member name="F:ModernWpf.Controls.PersonPicture.BadgeNumberProperty">
      <summary>Identifies the BadgeNumber dependency property.</summary>
      <returns>The identifier for the BadgeNumber dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.PersonPicture.BadgeText">
      <summary>Gets or sets the contact text to display on the badge.</summary>
      <returns>The contact text to display on the badge.</returns>
    </member>
    <member name="F:ModernWpf.Controls.PersonPicture.BadgeTextProperty">
      <summary>Identifies the BadgeText dependency property.</summary>
      <returns>The identifier for the BadgeText dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.PersonPicture.DisplayName">
      <summary>Gets or sets the contact's display name.</summary>
      <returns>The contact's display name.</returns>
    </member>
    <member name="F:ModernWpf.Controls.PersonPicture.DisplayNameProperty">
      <summary>Identifies the DisplayName dependency property.</summary>
      <returns>The identifier for the DisplayName dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.PersonPicture.Initials">
      <summary>Gets or sets the contact's initials.</summary>
      <returns>The contact's initials.</returns>
    </member>
    <member name="F:ModernWpf.Controls.PersonPicture.InitialsProperty">
      <summary>Identifies the Initials dependency property.</summary>
      <returns>The identifier for the Initials dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.PersonPicture.IsGroup">
      <summary>Gets or sets a value that indicates whether the PersonPicture represents a group or an individual.</summary>
      <returns>true if the PersonPicture represents a group; otherwise, false.</returns>
    </member>
    <member name="F:ModernWpf.Controls.PersonPicture.IsGroupProperty">
      <summary>Identifies the IsGroup dependency property.</summary>
      <returns>The identifier for the IsGroup dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.PersonPicture.ProfilePicture">
      <summary>Gets or sets the source of the contact's profile picture.</summary>
      <returns>An object that represents the image source file for the drawn image. Typically you set this with a BitmapImage object, constructed with the Uniform Resource Identifier (URI) that describes the path to a valid image source file. Or, you can initialize a BitmapSource with a stream, perhaps a stream from a storage file.</returns>
    </member>
    <member name="F:ModernWpf.Controls.PersonPicture.ProfilePictureProperty">
      <summary>Identifies the ProfilePicture dependency property.</summary>
      <returns>The identifier for the ProfilePicture dependency property.</returns>
    </member>
    <member name="T:ModernWpf.Controls.ProgressRing">
      <summary>Represents a control that indicates that an operation is ongoing. The typical visual appearance is a ring-shaped "spinner" that cycles an animation as progress continues.</summary>
    </member>
    <member name="M:ModernWpf.Controls.ProgressRing.#ctor">
      <summary>Initializes a new instance of the ProgressRing class.</summary>
    </member>
    <member name="P:ModernWpf.Controls.ProgressRing.IsActive">
      <summary>Gets or sets a value that indicates whether the ProgressRing is showing progress.</summary>
      <returns>**True** if the ProgressRing is showing progress; otherwise, **false**. The default is **false**.</returns>
    </member>
    <member name="F:ModernWpf.Controls.ProgressRing.IsActiveProperty">
      <summary>Identifies the IsActive dependency property.</summary>
      <returns>The identifier for the IsActive dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.ProgressRing.TemplateSettings">
      <summary>Gets an object that provides calculated values that can be referenced as **TemplateBinding** sources when defining templates for a ProgressRing control.</summary>
      <returns>An object that provides calculated values for templates.</returns>
    </member>
    <member name="T:ModernWpf.Controls.Primitives.FlyoutBase">
      <summary>Represents the base class for flyout controls, such as Flyout and MenuFlyout.</summary>
    </member>
    <member name="M:ModernWpf.Controls.Primitives.FlyoutBase.#ctor">
      <summary>Provides base class initialization behavior for FlyoutBase derived classes.</summary>
    </member>
    <member name="F:ModernWpf.Controls.Primitives.FlyoutBase.AttachedFlyoutProperty">
      <summary>Identifies the FlyoutBase.AttachedFlyout XAML attached property.</summary>
      <returns>The identifier for the FlyoutBase.AttachedFlyout XAML attached property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.Primitives.FlyoutBase.Placement">
      <summary>Gets or sets the default placement to be used for the flyout, in relation to its placement target.</summary>
      <returns>A named constant of the enumeration that indicates where the flyout is placed in relation to its placement target. The default is Top.</returns>
    </member>
    <member name="F:ModernWpf.Controls.Primitives.FlyoutBase.PlacementProperty">
      <summary>Identifies the Placement dependency property.</summary>
      <returns>The identifier for the Placement dependency property.</returns>
    </member>
    <member name="E:ModernWpf.Controls.Primitives.FlyoutBase.Closed">
      <summary>Occurs when the flyout is hidden.</summary>
    </member>
    <member name="E:ModernWpf.Controls.Primitives.FlyoutBase.Opened">
      <summary>Occurs when the flyout is shown.</summary>
    </member>
    <member name="E:ModernWpf.Controls.Primitives.FlyoutBase.Opening">
      <summary>Occurs before the flyout is shown.</summary>
    </member>
    <member name="M:ModernWpf.Controls.Primitives.FlyoutBase.CreatePresenter">
      <summary>When overridden in a derived class, initializes a control to show the flyout content as appropriate for the derived control. Note: This method has no base class implementation and must be overridden in a derived class.</summary>
      <returns>The control that displays the content of the flyout.</returns>
    </member>
    <member name="M:ModernWpf.Controls.Primitives.FlyoutBase.GetAttachedFlyout(System.Windows.FrameworkElement)">
      <summary>Gets the flyout associated with the specified element.</summary>
      <param name="element">The element for which to get the associated flyout.</param>
      <returns>The flyout attached to the specified element.</returns>
    </member>
    <member name="M:ModernWpf.Controls.Primitives.FlyoutBase.Hide">
      <summary>Closes the flyout.</summary>
    </member>
    <member name="M:ModernWpf.Controls.Primitives.FlyoutBase.SetAttachedFlyout(System.Windows.FrameworkElement,ModernWpf.Controls.Primitives.FlyoutBase)">
      <summary>Associates the specified flyout with the specified FrameworkElement.</summary>
      <param name="element">The element to associate the flyout with.</param>
      <param name="value">The flyout to associate with the specified element.</param>
    </member>
    <member name="M:ModernWpf.Controls.Primitives.FlyoutBase.ShowAt(System.Windows.FrameworkElement)">
      <summary>Shows the flyout placed in relation to the specified element.</summary>
      <param name="placementTarget">The element to use as the flyout's placement target.</param>
    </member>
    <member name="M:ModernWpf.Controls.Primitives.FlyoutBase.ShowAttachedFlyout(System.Windows.FrameworkElement)">
      <summary>Shows the flyout associated with the specified element, if any.</summary>
      <param name="flyoutOwner">The element for which to show the associated flyout.</param>
    </member>
    <member name="T:ModernWpf.Controls.Primitives.FlyoutPlacementMode">
      <summary>Defines constants that specify the preferred location for positioning a FlyoutBase derived control relative to a visual element.</summary>
    </member>
    <member name="F:ModernWpf.Controls.Primitives.FlyoutPlacementMode.Bottom">
      <summary>The preferred location of the flyout is below the target element.</summary>
    </member>
    <member name="F:ModernWpf.Controls.Primitives.FlyoutPlacementMode.Full">
      <summary>The preferred location of the flyout is centered on the screen.</summary>
    </member>
    <member name="F:ModernWpf.Controls.Primitives.FlyoutPlacementMode.Left">
      <summary>The preferred location of the flyout is to the left of the target element.</summary>
    </member>
    <member name="F:ModernWpf.Controls.Primitives.FlyoutPlacementMode.Right">
      <summary>The preferred location of the flyout is to the right of the target element.</summary>
    </member>
    <member name="F:ModernWpf.Controls.Primitives.FlyoutPlacementMode.Top">
      <summary>The preferred location of the flyout is above the target element.</summary>
    </member>
    <member name="T:ModernWpf.Controls.Primitives.FlyoutShowMode">
      <summary>Defines constants that specify how a flyout behaves when shown.</summary>
    </member>
    <member name="F:ModernWpf.Controls.Primitives.FlyoutShowMode.Auto">
      <summary>The show mode is determined automatically based on the method used to show the flyout.</summary>
    </member>
    <member name="F:ModernWpf.Controls.Primitives.FlyoutShowMode.Standard">
      <summary>Behavior is typical of a flyout shown reactively, like a context menu. The open flyout takes focus. For a CommandBarFlyout, it opens in it's expanded state.</summary>
    </member>
    <member name="F:ModernWpf.Controls.Primitives.FlyoutShowMode.Transient">
      <summary>Behavior is typical of a flyout shown proactively. The open flyout does not take focus. For a CommandBarFlyout, it opens in it's collapsed state.</summary>
    </member>
    <member name="T:ModernWpf.Controls.Primitives.ProgressRingTemplateSettings">
      <summary>Provides calculated values that can be referenced as **TemplatedParent** sources when defining templates for a ProgressRing control. Not intended for general use.</summary>
    </member>
    <member name="P:ModernWpf.Controls.Primitives.ProgressRingTemplateSettings.EllipseDiameter">
      <summary>Gets the template-defined diameter of the "Ellipse" element that is animated in a templated ProgressRing.</summary>
      <returns>The "Ellipse" width in pixels.</returns>
    </member>
    <member name="P:ModernWpf.Controls.Primitives.ProgressRingTemplateSettings.EllipseOffset">
      <summary>Gets the template-defined offset position of the "Ellipse" element that is animated in a templated ProgressRing.</summary>
      <returns>The offset in pixels.</returns>
    </member>
    <member name="P:ModernWpf.Controls.Primitives.ProgressRingTemplateSettings.MaxSideLength">
      <summary>Gets the maximum bounding size of the progress ring as rendered.</summary>
      <returns>The maximum bounding size of the progress ring as rendered, in pixels.</returns>
    </member>
    <member name="T:ModernWpf.Controls.Primitives.RadioButtonsListView" />
    <member name="M:ModernWpf.Controls.Primitives.RadioButtonsListView.#ctor">
      <summary>Initializes a new instance of the <see cref="ModernWpf.Controls.Primitives.RadioButtonsListView?text=RadioButtonsListView" /> class.</summary>
    </member>
    <member name="T:ModernWpf.Controls.Primitives.RadioButtonsListViewItem" />
    <member name="M:ModernWpf.Controls.Primitives.RadioButtonsListViewItem.#ctor">
      <summary>Initializes a new instance of the <see cref="ModernWpf.Controls.Primitives.RadioButtonsListViewItem?text=RadioButtonsListViewItem" /> class.</summary>
    </member>
    <member name="T:ModernWpf.Controls.Primitives.SplitViewTemplateSettings">
      <summary>Provides calculated values that can be referenced as **TemplatedParent** sources when defining templates for a SplitView. Not intended for general use.</summary>
    </member>
    <member name="P:ModernWpf.Controls.Primitives.SplitViewTemplateSettings.CompactPaneGridLength">
      <summary>Gets the CompactPaneLength value as a GridLength.</summary>
      <returns>The CompactPaneLength value as a GridLength.</returns>
    </member>
    <member name="P:ModernWpf.Controls.Primitives.SplitViewTemplateSettings.NegativeOpenPaneLength">
      <summary>Gets the negative of the OpenPaneLength value.</summary>
      <returns>The negative of the OpenPaneLength value.</returns>
    </member>
    <member name="P:ModernWpf.Controls.Primitives.SplitViewTemplateSettings.NegativeOpenPaneLengthMinusCompactLength">
      <summary>Gets the negative of the value calculated by subtracting the CompactPaneLength value from the OpenPaneLength value.</summary>
      <returns>The negative of the OpenPaneLength value minus the CompactPaneLength value.</returns>
    </member>
    <member name="P:ModernWpf.Controls.Primitives.SplitViewTemplateSettings.OpenPaneGridLength">
      <summary>Gets the OpenPaneLength value as a GridLength.</summary>
      <returns>The OpenPaneLength value as a GridLength.</returns>
    </member>
    <member name="P:ModernWpf.Controls.Primitives.SplitViewTemplateSettings.OpenPaneLength">
      <summary>Gets the OpenPaneLength value.</summary>
      <returns>The OpenPaneLength value.</returns>
    </member>
    <member name="P:ModernWpf.Controls.Primitives.SplitViewTemplateSettings.OpenPaneLengthMinusCompactLength">
      <summary>Gets a value calculated by subtracting the CompactPaneLength value from the OpenPaneLength value.</summary>
      <returns>The value calculated by subtracting the CompactPaneLength value from the OpenPaneLength value.</returns>
    </member>
    <member name="T:ModernWpf.Controls.RadioButtons" />
    <member name="M:ModernWpf.Controls.RadioButtons.#ctor">
      <summary>Initializes a new instance of the <see cref="ModernWpf.Controls.RadioButtons?text=RadioButtons" /> class.</summary>
    </member>
    <member name="M:ModernWpf.Controls.RadioButtons.ContainerFromIndex(System.Int32)">
      <param name="index" />
    </member>
    <member name="M:ModernWpf.Controls.RadioButtons.ContainerFromItem(System.Object)">
      <param name="item" />
    </member>
    <member name="P:ModernWpf.Controls.RadioButtons.Header" />
    <member name="F:ModernWpf.Controls.RadioButtons.HeaderProperty">
      <summary>Identifies the <see cref="ModernWpf.Controls.RadioButtons.Header?text=Header" /> dependency property.</summary>
      <returns>The identifier for the <see cref="ModernWpf.Controls.RadioButtons.Header?text=Header" /> dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.RadioButtons.Items" />
    <member name="F:ModernWpf.Controls.RadioButtons.ItemsProperty">
      <summary>Identifies the <see cref="ModernWpf.Controls.RadioButtons.Items?text=Items" /> dependency property.</summary>
      <returns>The identifier for the <see cref="ModernWpf.Controls.RadioButtons.Items?text=Items" /> dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.RadioButtons.ItemsSource" />
    <member name="F:ModernWpf.Controls.RadioButtons.ItemsSourceProperty">
      <summary>Identifies the <see cref="ModernWpf.Controls.RadioButtons.ItemsSource?text=ItemsSource" /> dependency property.</summary>
      <returns>The identifier for the <see cref="ModernWpf.Controls.RadioButtons.ItemsSource?text=ItemsSource" /> dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.RadioButtons.ItemTemplate" />
    <member name="F:ModernWpf.Controls.RadioButtons.ItemTemplateProperty">
      <summary>Identifies the <see cref="ModernWpf.Controls.RadioButtons.ItemTemplate?text=ItemTemplate" /> dependency property.</summary>
      <returns>The identifier for the <see cref="ModernWpf.Controls.RadioButtons.ItemTemplate?text=ItemTemplate" /> dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.RadioButtons.MaximumColumns" />
    <member name="F:ModernWpf.Controls.RadioButtons.MaximumColumnsProperty">
      <summary>Identifies the <see cref="ModernWpf.Controls.RadioButtons.MaximumColumns?text=MaximumColumns" /> dependency property.</summary>
      <returns>The identifier for the <see cref="ModernWpf.Controls.RadioButtons.MaximumColumns?text=MaximumColumns" /> dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.RadioButtons.SelectedIndex" />
    <member name="F:ModernWpf.Controls.RadioButtons.SelectedIndexProperty">
      <summary>Identifies the <see cref="ModernWpf.Controls.RadioButtons.SelectedIndex?text=SelectedIndex" /> dependency property.</summary>
      <returns>The identifier for the <see cref="ModernWpf.Controls.RadioButtons.SelectedIndex?text=SelectedIndex" /> dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.RadioButtons.SelectedItem" />
    <member name="F:ModernWpf.Controls.RadioButtons.SelectedItemProperty">
      <summary>Identifies the <see cref="ModernWpf.Controls.RadioButtons.SelectedItem?text=SelectedItem" /> dependency property.</summary>
      <returns>The identifier for the <see cref="ModernWpf.Controls.RadioButtons.SelectedItem?text=SelectedItem" /> dependency property.</returns>
    </member>
    <member name="E:ModernWpf.Controls.RadioButtons.SelectionChanged" />
    <member name="T:ModernWpf.Controls.RadioMenuItem" />
    <member name="M:ModernWpf.Controls.RadioMenuItem.#ctor">
      <summary>Initializes a new instance of the <see cref="ModernWpf.Controls.RadioMenuItem?text=RadioMenuItem" /> class.</summary>
    </member>
    <member name="P:ModernWpf.Controls.RadioMenuItem.GroupName">
      <summary>Gets or sets the name that specifies which RadioMenuItem controls are mutually exclusive.</summary>
    </member>
    <member name="F:ModernWpf.Controls.RadioMenuItem.GroupNameProperty">
      <summary>Identifies the <see cref="ModernWpf.Controls.RadioMenuItem.GroupName?text=GroupName" /> dependency property.</summary>
      <returns>The identifier for the <see cref="ModernWpf.Controls.RadioMenuItem.GroupName?text=GroupName" /> dependency property.</returns>
    </member>
    <member name="T:ModernWpf.Controls.RatingControl">
      <summary>Represents a control that lets a user enter a star rating.</summary>
    </member>
    <member name="M:ModernWpf.Controls.RatingControl.#ctor">
      <summary>Initializes a new instance of the RatingControl class.</summary>
    </member>
    <member name="P:ModernWpf.Controls.RatingControl.Caption">
      <summary>Gets or sets the text label for the control.</summary>
      <returns>The text label for the control. The default is an empty string.</returns>
    </member>
    <member name="F:ModernWpf.Controls.RatingControl.CaptionProperty">
      <summary>Identifies the Caption dependency property.</summary>
      <returns>The identifier for Caption dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.RatingControl.InitialSetValue">
      <summary>Gets or sets the initial set rating value.</summary>
      <returns>The initial set rating value. The default is 1.</returns>
    </member>
    <member name="F:ModernWpf.Controls.RatingControl.InitialSetValueProperty">
      <summary>Identifies the InitialSetValue dependency property.</summary>
      <returns>The identifier for InitialSetValue dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.RatingControl.IsClearEnabled">
      <summary>Gets or sets the value that determines if the user can remove the rating.</summary>
      <returns>true if the user can remove the rating; otherwise, false. The default is true.</returns>
    </member>
    <member name="F:ModernWpf.Controls.RatingControl.IsClearEnabledProperty">
      <summary>Identifies the IsClearEnabled dependency property.</summary>
      <returns>The identifier for IsClearEnabled dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.RatingControl.IsReadOnly">
      <summary>Gets or sets the value that determines if the user can change the rating.</summary>
      <returns>true if the rating is read-only; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:ModernWpf.Controls.RatingControl.IsReadOnlyProperty">
      <summary>Identifies the IsReadOnly dependency property.</summary>
      <returns>The identifier for IsReadOnly dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.RatingControl.ItemInfo">
      <summary>Gets or sets info about the visual states of the items that represent a rating.</summary>
      <returns>A RatingItemInfo-derived object that contains details about the visual states of the items that represent a rating.</returns>
    </member>
    <member name="F:ModernWpf.Controls.RatingControl.ItemInfoProperty">
      <summary>Identifies the ItemInfo dependency property.</summary>
      <returns>The identifier for ItemInfo dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.RatingControl.MaxRating">
      <summary>Gets or sets the maximum allowed rating value.</summary>
      <returns>The maximum allowed rating value. The default is 5.</returns>
    </member>
    <member name="F:ModernWpf.Controls.RatingControl.MaxRatingProperty">
      <summary>Identifies the MaxRating dependency property.</summary>
      <returns>The identifier for MaxRating dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.RatingControl.PlaceholderValue">
      <summary>Gets or sets the rating that is displayed in the control until the value is changed by a user action or some other operation.</summary>
      <returns>The rating that is displayed in the control when no value is entered. The default is null.</returns>
    </member>
    <member name="F:ModernWpf.Controls.RatingControl.PlaceholderValueProperty">
      <summary>Identifies the PlaceholderValue dependency property.</summary>
      <returns>The identifier for PlaceholderValue dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.RatingControl.Value">
      <summary>Gets or sets the rating value.</summary>
      <returns>The rating value. The default is null.</returns>
    </member>
    <member name="E:ModernWpf.Controls.RatingControl.ValueChanged">
      <summary>Occurs when the Value property has changed.</summary>
    </member>
    <member name="F:ModernWpf.Controls.RatingControl.ValueProperty">
      <summary>Identifies the Value dependency property.</summary>
      <returns>The identifier for Value dependency property.</returns>
    </member>
    <member name="T:ModernWpf.Controls.RatingItemFontInfo">
      <summary>Represents information about the visual states of font elements that represent a rating.</summary>
    </member>
    <member name="M:ModernWpf.Controls.RatingItemFontInfo.#ctor">
      <summary>Initializes a new instance of the RatingItemFontInfo class.</summary>
    </member>
    <member name="P:ModernWpf.Controls.RatingItemFontInfo.DisabledGlyph">
      <summary>Gets or sets a Segoe MDL2 Assets font glyph that represents a rating element that is disabled.</summary>
      <returns>The hexadecimal character code for the rating element glyph.</returns>
    </member>
    <member name="F:ModernWpf.Controls.RatingItemFontInfo.DisabledGlyphProperty">
      <summary>Identifies the DisabledGlyph dependency property.</summary>
      <returns>The identifier for DisabledGlyph dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.RatingItemFontInfo.Glyph">
      <summary>Gets or sets a Segoe MDL2 Assets font glyph that represents a rating element that has been set by the user.</summary>
      <returns>The hexadecimal character code for the rating element glyph.</returns>
    </member>
    <member name="F:ModernWpf.Controls.RatingItemFontInfo.GlyphProperty">
      <summary>Identifies the Glyph dependency property.</summary>
      <returns>The identifier for Glyph dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.RatingItemFontInfo.PlaceholderGlyph">
      <summary>Gets or sets a Segoe MDL2 Assets font glyph that represents a rating element that is showing a placeholder value.</summary>
      <returns>The hexadecimal character code for the rating element glyph.</returns>
    </member>
    <member name="F:ModernWpf.Controls.RatingItemFontInfo.PlaceholderGlyphProperty">
      <summary>Identifies the PlaceholderGlyph dependency property.</summary>
      <returns>The identifier for PlaceholderGlyph dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.RatingItemFontInfo.PointerOverGlyph">
      <summary>Gets or sets a Segoe MDL2 Assets font glyph that represents a rating element that has the pointer over it.</summary>
      <returns>The hexadecimal character code for the rating element glyph.</returns>
    </member>
    <member name="F:ModernWpf.Controls.RatingItemFontInfo.PointerOverGlyphProperty">
      <summary>Identifies the PointerOverGlyph dependency property.</summary>
      <returns>The identifier for PointerOverGlyph dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.RatingItemFontInfo.PointerOverPlaceholderGlyph">
      <summary>Gets or sets a Segoe MDL2 Assets font glyph that represents a rating element showing a placeholder value with the pointer over it.</summary>
      <returns>The hexadecimal character code for the rating element glyph.</returns>
    </member>
    <member name="F:ModernWpf.Controls.RatingItemFontInfo.PointerOverPlaceholderGlyphProperty">
      <summary>Identifies the PointerOverPlaceholderGlyph dependency property.</summary>
      <returns>The identifier for PointerOverPlaceholderGlyph dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.RatingItemFontInfo.UnsetGlyph">
      <summary>Gets or sets a Segoe MDL2 Assets font glyph that represents a rating element that has not been set.</summary>
      <returns>The hexadecimal character code for the rating element glyph.</returns>
    </member>
    <member name="F:ModernWpf.Controls.RatingItemFontInfo.UnsetGlyphProperty">
      <summary>Identifies the UnsetGlyph dependency property.</summary>
      <returns>The identifier for UnsetGlyph dependency property.</returns>
    </member>
    <member name="T:ModernWpf.Controls.RatingItemImageInfo">
      <summary>Represents information about the visual states of image elements that represent a rating.</summary>
    </member>
    <member name="M:ModernWpf.Controls.RatingItemImageInfo.#ctor">
      <summary>Initializes a new instance of the RatingItemImageInfo class.</summary>
    </member>
    <member name="P:ModernWpf.Controls.RatingItemImageInfo.DisabledImage">
      <summary>Gets or sets an image that represents a rating element that is disabled.</summary>
      <returns>An object that represents the image source file for the drawn image. Typically you set this with a BitmapImage object, constructed with the Uniform Resource Identifier (URI) that describes the path to a valid image source file. Or, you can initialize a BitmapSource with a stream, perhaps a stream from a storage file.</returns>
    </member>
    <member name="F:ModernWpf.Controls.RatingItemImageInfo.DisabledImageProperty">
      <summary>Identifies the DisabledImage dependency property.</summary>
      <returns>The identifier for DisabledImage dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.RatingItemImageInfo.Image">
      <summary>Gets or sets an image that represents a rating element that has been set by the user.</summary>
      <returns>An object that represents the image source file for the drawn image. Typically you set this with a BitmapImage object, constructed with the Uniform Resource Identifier (URI) that describes the path to a valid image source file. Or, you can initialize a BitmapSource with a stream, perhaps a stream from a storage file.</returns>
    </member>
    <member name="F:ModernWpf.Controls.RatingItemImageInfo.ImageProperty">
      <summary>Identifies the Image dependency property.</summary>
      <returns>The identifier for Image dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.RatingItemImageInfo.PlaceholderImage">
      <summary>Gets or sets an image that represents a rating element that is showing a placeholder value.</summary>
      <returns>An object that represents the image source file for the drawn image. Typically you set this with a BitmapImage object, constructed with the Uniform Resource Identifier (URI) that describes the path to a valid image source file. Or, you can initialize a BitmapSource with a stream, perhaps a stream from a storage file.</returns>
    </member>
    <member name="F:ModernWpf.Controls.RatingItemImageInfo.PlaceholderImageProperty">
      <summary>Identifies the PlaceholderImage dependency property.</summary>
      <returns>The identifier for PlaceholderImage dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.RatingItemImageInfo.PointerOverImage">
      <summary>Gets or sets an image that represents a rating element that has the pointer over it.</summary>
      <returns>An object that represents the image source file for the drawn image. Typically you set this with a BitmapImage object, constructed with the Uniform Resource Identifier (URI) that describes the path to a valid image source file. Or, you can initialize a BitmapSource with a stream, perhaps a stream from a storage file.</returns>
    </member>
    <member name="F:ModernWpf.Controls.RatingItemImageInfo.PointerOverImageProperty">
      <summary>Identifies the PointerOverImage dependency property.</summary>
      <returns>The identifier for PointerOverImage dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.RatingItemImageInfo.PointerOverPlaceholderImage">
      <summary>Gets or sets an image that represents a rating element showing a placeholder value with the pointer over it.</summary>
      <returns>An object that represents the image source file for the drawn image. Typically you set this with a BitmapImage object, constructed with the Uniform Resource Identifier (URI) that describes the path to a valid image source file. Or, you can initialize a BitmapSource with a stream, perhaps a stream from a storage file.</returns>
    </member>
    <member name="F:ModernWpf.Controls.RatingItemImageInfo.PointerOverPlaceholderImageProperty">
      <summary>Identifies the PointerOverPlaceholderImage dependency property.</summary>
      <returns>The identifier for PointerOverPlaceholderImage dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.RatingItemImageInfo.UnsetImage">
      <summary>Gets or sets an image that represents a rating element that has not been set.</summary>
      <returns>An object that represents the image source file for the drawn image. Typically you set this with a BitmapImage object, constructed with the Uniform Resource Identifier (URI) that describes the path to a valid image source file. Or, you can initialize a BitmapSource with a stream, perhaps a stream from a storage file.</returns>
    </member>
    <member name="F:ModernWpf.Controls.RatingItemImageInfo.UnsetImageProperty">
      <summary>Identifies the UnsetImage dependency property.</summary>
      <returns>The identifier for UnsetImage dependency property.</returns>
    </member>
    <member name="T:ModernWpf.Controls.RatingItemInfo">
      <summary>Represents information about the visual states of the elements that represent a rating.</summary>
    </member>
    <member name="M:ModernWpf.Controls.RatingItemInfo.#ctor">
      <summary>Initializes a new instance of the RatingItemInfo class.</summary>
    </member>
    <member name="T:ModernWpf.Controls.RecyclePool">
      <summary>Represents a cache of elements that can be re-used to display data items.</summary>
    </member>
    <member name="M:ModernWpf.Controls.RecyclePool.#ctor">
      <summary>Initializes a new instance of the <see cref="ModernWpf.Controls.RecyclePool?text=RecyclePool" /> class.</summary>
    </member>
    <member name="M:ModernWpf.Controls.RecyclePool.GetPoolInstance(System.Windows.DataTemplate)">
      <summary>Gets the value of the RecyclePool.PoolInstance XAML attached property for the target data template.</summary>
      <param name="dataTemplate">The object from which the property value is read.</param>
      <returns>The RecyclePool.PoolInstance XAML attached property value of the specified object.</returns>
    </member>
    <member name="F:ModernWpf.Controls.RecyclePool.PoolInstanceProperty">
      <summary>Identifies the PoolInstance attached property.</summary>
      <returns>The identifier for the PoolInstance attached property.</returns>
    </member>
    <member name="M:ModernWpf.Controls.RecyclePool.PutElement(System.Windows.UIElement,System.String)">
      <summary>Adds an element to the recycle pool.</summary>
      <param name="element">The element to add to the recycle pool.</param>
      <param name="key">The identifier for the element.</param>
    </member>
    <member name="M:ModernWpf.Controls.RecyclePool.PutElement(System.Windows.UIElement,System.String,System.Windows.UIElement)">
      <summary>Adds an element to the recycle pool with the specified owner.</summary>
      <param name="element">The element to add to the recycle pool.</param>
      <param name="key">The identifier for the element.</param>
      <param name="owner">The parent container for the element.</param>
    </member>
    <member name="M:ModernWpf.Controls.RecyclePool.PutElementCore(System.Windows.UIElement,System.String,System.Windows.UIElement)">
      <summary>Adds an element to the recycle pool with the specified owner. (This method provides the behavior when PutElement is called.)</summary>
      <param name="element">The element to add to the recycle pool.</param>
      <param name="key">The identifier for the element.</param>
      <param name="owner">The parent container for the element.</param>
    </member>
    <member name="M:ModernWpf.Controls.RecyclePool.SetPoolInstance(System.Windows.DataTemplate,ModernWpf.Controls.RecyclePool)">
      <summary>Sets the value of the RecyclePool.PoolInstance XAML attached property for the target data template.</summary>
      <param name="dataTemplate">The object to which the property value is written.</param>
      <param name="value">The value to set.</param>
    </member>
    <member name="M:ModernWpf.Controls.RecyclePool.TryGetElement(System.String)">
      <summary>Attempts to retrieve an element identified by the specified key.</summary>
      <param name="key">The identifier for the element.</param>
      <returns>The element identified by key if it can be found; otherwise, null.</returns>
    </member>
    <member name="M:ModernWpf.Controls.RecyclePool.TryGetElement(System.String,System.Windows.UIElement)">
      <summary>Attempts to retrieve an element identified by the specified key, with the specified owner.</summary>
      <param name="key">The identifier for the element.</param>
      <param name="owner">The parent container for the element.</param>
      <returns>The element identified by key if it can be found; otherwise, null.</returns>
    </member>
    <member name="M:ModernWpf.Controls.RecyclePool.TryGetElementCore(System.String,System.Windows.UIElement)">
      <summary>Attempts to retrieve an element identified by the specified key. (This method provides the behavior when TryGetElement is called.)</summary>
      <param name="key">The identifier for the element.</param>
      <param name="owner">The parent container for the element.</param>
      <returns>The element identified by key if it can be found; otherwise, null.</returns>
    </member>
    <member name="T:ModernWpf.Controls.RecyclingElementFactory">
      <summary>Represents a component that creates and recycles elements for use in a <see cref="ModernWpf.Controls.Layout?text=Layout" />.</summary>
    </member>
    <member name="M:ModernWpf.Controls.RecyclingElementFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="ModernWpf.Controls.RecyclingElementFactory?text=RecyclingElementFactory" /> class.</summary>
    </member>
    <member name="M:ModernWpf.Controls.RecyclingElementFactory.OnSelectTemplateKeyCore(System.Object,System.Windows.UIElement)">
      <summary>Raises the <see cref="ModernWpf.Controls.RecyclingElementFactory.SelectTemplateKey?text=SelectTemplateKey" /> event.</summary>
      <param name="dataContext">The data item to be displayed by the template.</param>
      <param name="owner">The parent container for the element.</param>
      <returns>The key for the data template.</returns>
    </member>
    <member name="P:ModernWpf.Controls.RecyclingElementFactory.RecyclePool">
      <summary>Gets or sets the pool of elements that can be recycled.</summary>
      <returns>The pool of elements that can be recycled.</returns>
    </member>
    <member name="E:ModernWpf.Controls.RecyclingElementFactory.SelectTemplateKey">
      <summary>Occurs when an element is retrieved in order to get a template key for the element.</summary>
    </member>
    <member name="P:ModernWpf.Controls.RecyclingElementFactory.Templates">
      <returns>Gets or sets the collection of data templates, identified by key, that can be applied to the element.</returns>
    </member>
    <member name="T:ModernWpf.Controls.SelectionModel">
      <summary>Represents a component that tracks the selection state of items in a data source.</summary>
    </member>
    <member name="M:ModernWpf.Controls.SelectionModel.#ctor">
      <summary>
        Initializes a new instance of the <see cref="ModernWpf.Controls.SelectionModel?text=SelectionModel" /> class.
      </summary>
    </member>
    <member name="P:ModernWpf.Controls.SelectionModel.AnchorIndex">
      <summary>Gets or sets the index of the anchor item of a selected range.</summary>
      <returns>The index of the anchor item of a selected range.</returns>
    </member>
    <member name="E:ModernWpf.Controls.SelectionModel.ChildrenRequested">
      <summary>Occurs when nested items in a multi-level hierarchy are requested.</summary>
    </member>
    <member name="M:ModernWpf.Controls.SelectionModel.ClearSelection">
      <summary>De-selects all items.</summary>
    </member>
    <member name="M:ModernWpf.Controls.SelectionModel.Deselect(System.Int32)">
      <summary>De-selects the item at the specified index in a 1-level data structure.</summary>
      <param name="index">The index of the item to de-select.</param>
    </member>
    <member name="M:ModernWpf.Controls.SelectionModel.Deselect(System.Int32,System.Int32)">
      <summary>De-selects the item at the specified index in a 2-level data structure.</summary>
      <param name="groupIndex">The index of the group the item is in.</param>
      <param name="itemIndex">The index of the item to de-select.</param>
    </member>
    <member name="M:ModernWpf.Controls.SelectionModel.DeselectAt(ModernWpf.Controls.IndexPath)">
      <summary>De-selects the item at the specified index in a multi-level data structure.</summary>
      <param name="index">The IndexPath that describes the location of the item in the data structure.</param>
    </member>
    <member name="M:ModernWpf.Controls.SelectionModel.DeselectRange(ModernWpf.Controls.IndexPath,ModernWpf.Controls.IndexPath)">
      <summary>De-selects all items between the specified start and end locations.</summary>
      <param name="start">The IndexPath that describes the starting location of the range in the data structure.</param>
      <param name="end">The IndexPath that describes the ending location of the range in the data structure.</param>
    </member>
    <member name="M:ModernWpf.Controls.SelectionModel.DeselectRangeFromAnchor(System.Int32)">
      <summary>De-selects all items between the AnchorIndex and the specified index in a 1-level data structure.</summary>
      <param name="index">The index of the item at the end of the range.</param>
    </member>
    <member name="M:ModernWpf.Controls.SelectionModel.DeselectRangeFromAnchor(System.Int32,System.Int32)">
      <summary>De-selects all items between the AnchorIndex and the specified index in a 2-level data structure.</summary>
      <param name="groupIndex">The index of the group the item is in.</param>
      <param name="itemIndex">The index of the item at the end of the range.</param>
    </member>
    <member name="M:ModernWpf.Controls.SelectionModel.DeselectRangeFromAnchorTo(ModernWpf.Controls.IndexPath)">
      <summary>De-selects all items between the AnchorIndex and the specified index in a multi-level data structure.</summary>
      <param name="index">The IndexPath that describes the location of the item at the end of the range.</param>
    </member>
    <member name="M:ModernWpf.Controls.SelectionModel.IsSelected(System.Int32)">
      <summary>Retrieves a value that indicates whether the item at the specified index in a 1-level data structure is selected.</summary>
      <param name="index">The index of the item.</param>
    </member>
    <member name="M:ModernWpf.Controls.SelectionModel.IsSelected(System.Int32,System.Int32)">
      <summary>Retrieves a value that indicates whether the item at the specified index in a 2-level data structure is selected.</summary>
      <param name="groupIndex" />
      <param name="itemIndex">The index of the item.</param>
    </member>
    <member name="M:ModernWpf.Controls.SelectionModel.IsSelectedAt(ModernWpf.Controls.IndexPath)">
      <summary>Retrieves a value that indicates whether the item at the specified index in a multi-level data structure is selected.</summary>
      <param name="index">The IndexPath that describes the location of the item in the data structure.</param>
    </member>
    <member name="M:ModernWpf.Controls.SelectionModel.OnPropertyChanged(System.String)">
      <summary>Called when the value of a selection model property has changed.</summary>
      <param name="propertyName">The name of the property that has changed.</param>
    </member>
    <member name="E:ModernWpf.Controls.SelectionModel.PropertyChanged">
      <summary>Occurs when the value of a selection model property has changed.</summary>
    </member>
    <member name="M:ModernWpf.Controls.SelectionModel.Select(System.Int32)">
      <summary>Selects the item at the specified index in a 1-level data structure.</summary>
      <param name="index">The index of the item to select.</param>
    </member>
    <member name="M:ModernWpf.Controls.SelectionModel.Select(System.Int32,System.Int32)">
      <summary>Selects the item at the specified index in a 2-level data structure.</summary>
      <param name="groupIndex">The index of the group the item is in.</param>
      <param name="itemIndex">The index of the item to select.</param>
    </member>
    <member name="M:ModernWpf.Controls.SelectionModel.SelectAll">
      <summary>Selects all items.</summary>
    </member>
    <member name="M:ModernWpf.Controls.SelectionModel.SelectAt(ModernWpf.Controls.IndexPath)">
      <summary>Selects the item at the specified index in a multi-level data structure.</summary>
      <param name="index">The IndexPath that describes the location of the item in the data structure.</param>
    </member>
    <member name="P:ModernWpf.Controls.SelectionModel.SelectedIndex">
      <summary>Gets or sets the index of a single selected item.</summary>
      <returns>The index of a single selected item.</returns>
    </member>
    <member name="P:ModernWpf.Controls.SelectionModel.SelectedIndices">
      <summary>Gets the collection of index values for multiple selected items.</summary>
      <returns>The collection of index values for multiple selected items. The default is an empty collection.</returns>
    </member>
    <member name="P:ModernWpf.Controls.SelectionModel.SelectedItem">
      <summary>Gets or sets a single selected item.</summary>
      <returns>The single selected item.</returns>
    </member>
    <member name="P:ModernWpf.Controls.SelectionModel.SelectedItems">
      <summary>Gets the collection of multiple selected items.</summary>
      <returns>The collection of multiple selected items. The default is an empty collection.</returns>
    </member>
    <member name="E:ModernWpf.Controls.SelectionModel.SelectionChanged">
      <summary>Occurs when the selection has changed.</summary>
    </member>
    <member name="M:ModernWpf.Controls.SelectionModel.SelectRange(ModernWpf.Controls.IndexPath,ModernWpf.Controls.IndexPath)">
      <summary>Selects all items between the specified start and end locations.</summary>
      <param name="start">The IndexPath that describes the starting location of the range in the data structure.</param>
      <param name="end">The IndexPath that describes the ending location of the range in the data structure.</param>
    </member>
    <member name="M:ModernWpf.Controls.SelectionModel.SelectRangeFromAnchor(System.Int32)">
      <summary>Selects all items between the AnchorIndex and the specified index in a 1-level data structure.</summary>
      <param name="index">The index of the item at the end of the range.</param>
    </member>
    <member name="M:ModernWpf.Controls.SelectionModel.SelectRangeFromAnchor(System.Int32,System.Int32)">
      <summary>Selects all items between the AnchorIndex and the specified index in a 2-level data structure.</summary>
      <param name="groupIndex">The index of the group the item is in.</param>
      <param name="itemIndex">The index of the item at the end of the range.</param>
    </member>
    <member name="M:ModernWpf.Controls.SelectionModel.SelectRangeFromAnchorTo(ModernWpf.Controls.IndexPath)">
      <summary>Selects all items between the AnchorIndex and the specified index in a multi-level data structure.</summary>
      <param name="index">The IndexPath that describes the location of the item in the data structure.</param>
    </member>
    <member name="M:ModernWpf.Controls.SelectionModel.SetAnchorIndex(System.Int32)">
      <summary>Sets the index of the anchor item in a selection range in a 1-level data structure.</summary>
      <param name="index">The index of the anchor item in a selection range.</param>
    </member>
    <member name="M:ModernWpf.Controls.SelectionModel.SetAnchorIndex(System.Int32,System.Int32)">
      <summary>Sets the index of the anchor item in a selection range in a multi-level data structure.</summary>
      <param name="groupIndex">The index of the group the item is in.</param>
      <param name="itemIndex">The index of the anchor item.</param>
    </member>
    <member name="P:ModernWpf.Controls.SelectionModel.SingleSelect">
      <summary>Gets or sets a value that indicates whether only one item can be selected at a time.</summary>
      <returns>true if only one item can be selected at a time; false if more than one item can be selected.</returns>
    </member>
    <member name="P:ModernWpf.Controls.SelectionModel.Source">
      <summary>Gets or sets the data source for which item selection is tracked.</summary>
      <returns>The data source for which item selection is tracked. The default is null.</returns>
    </member>
    <member name="T:ModernWpf.Controls.SelectTemplateEventArgs">
      <summary>Provides data for the <see cref="ModernWpf.Controls.RecyclingElementFactory.SelectTemplateKey?text=RecyclingElementFactory.SelectTemplateKey" /> event.</summary>
    </member>
    <member name="P:ModernWpf.Controls.SelectTemplateEventArgs.DataContext">
      <summary>Gets or sets the data item to be displayed by the template.</summary>
      <returns>The data item to be displayed by the template.</returns>
    </member>
    <member name="P:ModernWpf.Controls.SelectTemplateEventArgs.Owner">
      <summary>Gets or sets the parent container for the element.</summary>
      <returns>The parent container for the element.</returns>
    </member>
    <member name="P:ModernWpf.Controls.SelectTemplateEventArgs.TemplateKey">
      <summary>Gets or sets the key that identifies the data template.</summary>
      <returns>The key that identifies the data template.</returns>
    </member>
    <member name="T:ModernWpf.Controls.SplitButton">
      <summary>Represents a button with two parts that can be invoked separately. One part behaves like a standard button and the other part invokes a flyout.</summary>
    </member>
    <member name="M:ModernWpf.Controls.SplitButton.#ctor">
      <summary>Initializes a new instance of the SplitButton class.</summary>
    </member>
    <member name="P:ModernWpf.Controls.SplitButton.Command">
      <summary>Gets or sets the command to invoke when this button is pressed.</summary>
      <returns>The command to invoke when this button is pressed. The default is **null**.</returns>
    </member>
    <member name="P:ModernWpf.Controls.SplitButton.CommandParameter">
      <summary>Gets or sets the parameter to pass to the Command property.</summary>
      <returns>The parameter to pass to the Command property. The default is **null**.</returns>
    </member>
    <member name="F:ModernWpf.Controls.SplitButton.CommandParameterProperty">
      <summary>Identifies the CommandParameter dependency property.</summary>
      <returns>The identifier for the CommandParameter dependency property.</returns>
    </member>
    <member name="F:ModernWpf.Controls.SplitButton.CommandProperty">
      <summary>Identifies the Command dependency property.</summary>
      <returns>The identifier for the Command dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.SplitButton.Flyout">
      <summary>Gets or sets the flyout associated with this button.</summary>
      <returns>The flyout associated with this button. The default is **null**.</returns>
    </member>
    <member name="F:ModernWpf.Controls.SplitButton.FlyoutProperty">
      <summary>Identifies the Flyout dependency property.</summary>
      <returns>The identifier for the Flyout dependency property.</returns>
    </member>
    <member name="E:ModernWpf.Controls.SplitButton.Click">
      <summary>Occurs when a button control is clicked.</summary>
    </member>
    <member name="T:ModernWpf.Controls.SplitButtonClickEventArgs">
      <summary>Provides event data for the SplitButton.Click event.</summary>
    </member>
    <member name="T:ModernWpf.Controls.SplitView">
      <summary>Represents a container with two views; one view for the main content and another view that is typically used for navigation commands.</summary>
    </member>
    <member name="M:ModernWpf.Controls.SplitView.#ctor">
      <summary>Initializes a new instance of the SplitView class.</summary>
    </member>
    <member name="P:ModernWpf.Controls.SplitView.CompactPaneLength">
      <summary>Gets or sets the width of the SplitView pane in its compact display mode.</summary>
      <returns>The width of the pane in it's compact display mode. The default is 48 device-independent pixel (DIP) (defined by the **SplitViewCompactPaneThemeLength** resource).</returns>
    </member>
    <member name="F:ModernWpf.Controls.SplitView.CompactPaneLengthProperty">
      <summary>Identifies the CompactPaneLength  dependency property.</summary>
      <returns>The identifier for the CompactPaneLength  dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.SplitView.Content">
      <summary>Gets or sets the contents of the main panel of a SplitView.</summary>
      <returns>The contents of the main panel of a SplitView. The default is **null**.</returns>
    </member>
    <member name="F:ModernWpf.Controls.SplitView.ContentProperty">
      <summary>Identifies the Content  dependency property.</summary>
      <returns>The identifier for the Content  dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.SplitView.DisplayMode">
      <summary>Gets of sets a value that specifies how the pane and content areas of a SplitView are shown.</summary>
      <returns>A value of the enumeration that specifies how the pane and content areas of a SplitView are shown. The default is **Overlay**.</returns>
    </member>
    <member name="F:ModernWpf.Controls.SplitView.DisplayModeProperty">
      <summary>Identifies the DisplayMode  dependency property.</summary>
      <returns>The identifier for the DisplayMode  dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.SplitView.IsPaneOpen">
      <summary>Gets or sets a value that specifies whether the SplitView pane is expanded to its full width.</summary>
      <returns>**true** if the pane is expanded to its full width; otherwise, **false**. The default is **true**.</returns>
    </member>
    <member name="F:ModernWpf.Controls.SplitView.IsPaneOpenProperty">
      <summary>Identifies the IsPaneOpen  dependency property.</summary>
      <returns>The identifier for the IsPaneOpen  dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.SplitView.LightDismissOverlayMode">
      <summary>Gets or sets a value that specifies whether the area outside of a *light-dismiss* UI is darkened.</summary>
      <returns>A value of the enumeration that specifies whether the area outside of a light-dismiss UI is darkened. The default is **Auto**.</returns>
    </member>
    <member name="F:ModernWpf.Controls.SplitView.LightDismissOverlayModeProperty">
      <summary>Identifies the LightDismissOverlayMode dependency property.</summary>
      <returns>The identifier for the LightDismissOverlayMode dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.SplitView.OpenPaneLength">
      <summary>Gets or sets the width of the SplitView pane when it's fully expanded.</summary>
      <returns>The width of the SplitView pane when it's fully expanded. The default is 320 device-independent pixel (DIP).</returns>
    </member>
    <member name="F:ModernWpf.Controls.SplitView.OpenPaneLengthProperty">
      <summary>Identifies the  OpenPaneLength dependency property.</summary>
      <returns>The identifier for the OpenPaneLength  dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.SplitView.Pane">
      <summary>Gets or sets the contents of the pane of a SplitView.</summary>
      <returns>The contents of the pane of a SplitView. The default is **null**.</returns>
    </member>
    <member name="P:ModernWpf.Controls.SplitView.PaneBackground">
      <summary>Gets or sets the Brush to apply to the background of the Pane area of the control.</summary>
      <returns>The Brush to apply to the background of the Pane area of the control.</returns>
    </member>
    <member name="F:ModernWpf.Controls.SplitView.PaneBackgroundProperty">
      <summary>Identifies the PaneBackground  dependency property.</summary>
      <returns>The identifier for the   PaneBackground dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.SplitView.PanePlacement">
      <summary>Gets or sets a value that specifies whether the pane is shown on the right or left side of the SplitView.</summary>
      <returns>A value of the enumeration that specifies whether the pane is shown on the right or left side of the SplitView. The default is **Left**.</returns>
    </member>
    <member name="F:ModernWpf.Controls.SplitView.PanePlacementProperty">
      <summary>Identifies the PanePlacement  dependency property.</summary>
      <returns>The identifier for the   PanePlacement dependency property.</returns>
    </member>
    <member name="F:ModernWpf.Controls.SplitView.PaneProperty">
      <summary>Identifies the Pane  dependency property.</summary>
      <returns>The identifier for the  Pane dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.SplitView.TemplateSettings">
      <summary>Gets an object that provides calculated values that can be referenced as **TemplateBinding** sources when defining templates for a SplitView control.</summary>
      <returns>An object that provides calculated values for templates.</returns>
    </member>
    <member name="F:ModernWpf.Controls.SplitView.TemplateSettingsProperty">
      <summary>Identifies the TemplateSettings  dependency property.</summary>
      <returns>The identifier for the TemplateSettings  dependency property.</returns>
    </member>
    <member name="E:ModernWpf.Controls.SplitView.PaneClosed">
      <summary>Occurs when the SplitView pane is closed.</summary>
    </member>
    <member name="E:ModernWpf.Controls.SplitView.PaneClosing">
      <summary>Occurs when the SplitView pane is closing.</summary>
    </member>
    <member name="E:ModernWpf.Controls.SplitView.PaneOpened">
      <summary>Occurs when the SplitView pane is opened.</summary>
    </member>
    <member name="E:ModernWpf.Controls.SplitView.PaneOpening">
      <summary>Occurs when the SplitView pane is opening.</summary>
    </member>
    <member name="T:ModernWpf.Controls.SplitViewDisplayMode">
      <summary>Defines constants that specify how the pane is shown in a SplitView.</summary>
    </member>
    <member name="F:ModernWpf.Controls.SplitViewDisplayMode.CompactInline">
      <summary>The amount of the pane defined by the CompactPaneLength property is shown side-by-side with the content and takes up space in the control layout. The remaining part of the pane pushes the content to the side when it's open and takes up space in the control layout. The pane does not close when the user taps outside of it.</summary>
    </member>
    <member name="F:ModernWpf.Controls.SplitViewDisplayMode.CompactOverlay">
      <summary>The amount of the pane defined by the CompactPaneLength property is shown side-by-side with the content and takes up space in the control layout. The remaining part of the pane covers the content when it's open and does not take up space in the control layout. The pane closes when the user taps outside of it.</summary>
    </member>
    <member name="F:ModernWpf.Controls.SplitViewDisplayMode.Inline">
      <summary>The pane is shown side-by-side with the content and takes up space in the control layout. The pane does not close when the user taps outside of it.</summary>
    </member>
    <member name="F:ModernWpf.Controls.SplitViewDisplayMode.Overlay">
      <summary>The pane covers the content when it's open and does not take up space in the control layout. The pane closes when the user taps outside of it.</summary>
    </member>
    <member name="T:ModernWpf.Controls.SplitViewPaneClosingEventArgs">
      <summary>Provides event data for the SplitView.PaneClosing event.</summary>
    </member>
    <member name="P:ModernWpf.Controls.SplitViewPaneClosingEventArgs.Cancel">
      <summary>Gets or sets a value that indicates whether the pane closing action should be canceled.</summary>
      <returns>**true** to cancel the pane closing action; otherwise, **false**.</returns>
    </member>
    <member name="T:ModernWpf.Controls.SplitViewPanePlacement">
      <summary>Defines constants that specify whether the pane is to the left or right of the content in a SplitView.</summary>
    </member>
    <member name="F:ModernWpf.Controls.SplitViewPanePlacement.Left">
      <summary>The pane is shown to the left of the SplitView content .</summary>
    </member>
    <member name="F:ModernWpf.Controls.SplitViewPanePlacement.Right">
      <summary>The pane is shown to the right of the SplitView content .</summary>
    </member>
    <member name="T:ModernWpf.Controls.StackLayout">
      <summary>Arranges elements into a single line (with spacing) that can be oriented horizontally or vertically.</summary>
    </member>
    <member name="M:ModernWpf.Controls.StackLayout.#ctor">
      <summary>Initializes a new instance of the <see cref="ModernWpf.Controls.StackLayout?text=StackLayout" /> class.</summary>
    </member>
    <member name="P:ModernWpf.Controls.StackLayout.Orientation">
      <summary>Gets or sets the axis along which items are laid out.</summary>
      <returns>One of the enumeration values that specifies the axis along which items are laid out. The default is Vertical.</returns>
    </member>
    <member name="F:ModernWpf.Controls.StackLayout.OrientationProperty">
      <summary>Identifies the <see cref="ModernWpf.Controls.StackLayout.Orientation?text=Orientation" /> dependency property.</summary>
      <returns>The identifier for the <see cref="ModernWpf.Controls.StackLayout.Orientation?text=Orientation" /> dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.StackLayout.Spacing">
      <summary>Gets or sets a uniform distance (in pixels) between stacked items. It is applied in the direction of the StackLayout's Orientation.</summary>
      <returns>The uniform distance (in pixels) between stacked items.</returns>
    </member>
    <member name="F:ModernWpf.Controls.StackLayout.SpacingProperty">
      <summary>Identifies the <see cref="ModernWpf.Controls.StackLayout.Spacing?text=Spacing" /> dependency property.</summary>
      <returns>The identifier for the <see cref="ModernWpf.Controls.StackLayout.Spacing?text=Spacing" /> dependency property.</returns>
    </member>
    <member name="T:ModernWpf.Controls.StackLayoutState">
      <summary>Represents the state of a StackLayout.</summary>
    </member>
    <member name="M:ModernWpf.Controls.StackLayoutState.#ctor">
      <summary>Initializes a new instance of the <see cref="ModernWpf.Controls.StackLayoutState?text=StackLayoutState" /> class.</summary>
    </member>
    <member name="T:ModernWpf.Controls.ToggleSplitButton">
      <summary>Represents a button with two parts that can be invoked separately. One part behaves like a toggle button and the other part invokes a flyout.</summary>
    </member>
    <member name="M:ModernWpf.Controls.ToggleSplitButton.#ctor">
      <summary>Initializes a new instance of the ToggleSplitButton class.</summary>
    </member>
    <member name="P:ModernWpf.Controls.ToggleSplitButton.IsChecked">
      <summary>Gets or sets whether the ToggleSplitButton is checked.</summary>
      <returns>**true** if the ToggleSplitButton is checked; **false** if the ToggleSplitButton is unchecked. The default is **false**.</returns>
    </member>
    <member name="E:ModernWpf.Controls.ToggleSplitButton.IsCheckedChanged">
      <summary>Occurs when the value of the IsChecked property is changed.</summary>
    </member>
    <member name="T:ModernWpf.Controls.ToggleSplitButtonIsCheckedChangedEventArgs">
      <summary>Provides event data for the ToggleSplitButton.IsCheckedChanged event.</summary>
    </member>
    <member name="T:ModernWpf.Controls.ToggleSwitch">
      <summary>Represents a switch that can be toggled between two states.</summary>
    </member>
    <member name="M:ModernWpf.Controls.ToggleSwitch.#ctor">
      <summary>Initializes a new instance of the ToggleSwitch class.</summary>
    </member>
    <member name="P:ModernWpf.Controls.ToggleSwitch.Header">
      <summary>Gets or sets the header content.</summary>
      <returns>The header content for the ToggleSwitch.</returns>
    </member>
    <member name="F:ModernWpf.Controls.ToggleSwitch.HeaderProperty">
      <summary>Identifies the Header dependency property.</summary>
      <returns>The identifier for the Header dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.ToggleSwitch.HeaderTemplate">
      <summary>Gets or sets the DataTemplate used to display the control's header.</summary>
      <returns>The DataTemplate used to display the control's header.</returns>
    </member>
    <member name="F:ModernWpf.Controls.ToggleSwitch.HeaderTemplateProperty">
      <summary>Identifies the HeaderTemplate dependency property.</summary>
      <returns>The identifier for the HeaderTemplate dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.ToggleSwitch.IsOn">
      <summary>Gets or sets a value that declares whether the state of the ToggleSwitch is "On".</summary>
      <returns>**true** if the state is "On"; **false** if the state is "Off".</returns>
    </member>
    <member name="F:ModernWpf.Controls.ToggleSwitch.IsOnProperty">
      <summary>Identifies the IsOn dependency property.</summary>
      <returns>The identifier for the IsOn dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.ToggleSwitch.OffContent">
      <summary>Provides the object content that should be displayed using the OffContentTemplate when this ToggleSwitch has state of "Off".</summary>
      <returns>The object content. In some cases this is a string, in other cases it is a single element that provides a root for further composition content. Probably the most common "set" usage is to place a binding here.</returns>
    </member>
    <member name="F:ModernWpf.Controls.ToggleSwitch.OffContentProperty">
      <summary>Identifies the OffContent dependency property.</summary>
      <returns>The identifier for the OffContent dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.ToggleSwitch.OffContentTemplate">
      <summary>Gets or sets the DataTemplate used to display the control's content while in "Off" state.</summary>
      <returns>The DataTemplate that displays the control's content while in "Off" state.</returns>
    </member>
    <member name="F:ModernWpf.Controls.ToggleSwitch.OffContentTemplateProperty">
      <summary>Identifies the OffContentTemplate dependency property.</summary>
      <returns>The identifier for the OffContentTemplate dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.ToggleSwitch.OnContent">
      <summary>Provides the object content that should be displayed using the OnContentTemplate when this ToggleSwitch has state of "On".</summary>
      <returns>The object content. In some cases this is a string, in other cases it is a single element that provides a root for further composition content. Probably the most common "set" usage is to place a binding here.</returns>
    </member>
    <member name="F:ModernWpf.Controls.ToggleSwitch.OnContentProperty">
      <summary>Identifies the OnContent dependency property.</summary>
      <returns>The identifier for the OnContent dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.ToggleSwitch.OnContentTemplate">
      <summary>Gets or sets the DataTemplate used to display the control's content while in "On" state.</summary>
      <returns>The DataTemplate that displays the control's content while in "On" state.</returns>
    </member>
    <member name="F:ModernWpf.Controls.ToggleSwitch.OnContentTemplateProperty">
      <summary>Identifies the OnContentTemplate dependency property.</summary>
      <returns>The identifier for the OnContentTemplate dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.ToggleSwitch.TemplateSettings">
      <summary>Gets an object that provides calculated values that can be referenced as **TemplateBinding** sources when defining templates for a ToggleSwitch control.</summary>
      <returns>An object that provides calculated values for templates.</returns>
    </member>
    <member name="E:ModernWpf.Controls.ToggleSwitch.Toggled">
      <summary>Occurs when "On"/"Off" state changes for this ToggleSwitch.</summary>
    </member>
    <member name="M:ModernWpf.Controls.ToggleSwitch.OnHeaderChanged(System.Object,System.Object)">
      <summary>Invoked when the content for Header changes.</summary>
      <param name="oldContent">The string or object content of the old content.</param>
      <param name="newContent">The string or object content of the new content.</param>
    </member>
    <member name="M:ModernWpf.Controls.ToggleSwitch.OnOffContentChanged(System.Object,System.Object)">
      <summary>Invoked when the content for OffContent changes.</summary>
      <param name="oldContent">The string or object content of the old content.</param>
      <param name="newContent">The string or object content of the new content that is about to display.</param>
    </member>
    <member name="M:ModernWpf.Controls.ToggleSwitch.OnOnContentChanged(System.Object,System.Object)">
      <summary>Invoked when the content for OnContent changes.</summary>
      <param name="oldContent">The string or object content of the old content.</param>
      <param name="newContent">The string or object content of the new content that is about to display.</param>
    </member>
    <member name="M:ModernWpf.Controls.ToggleSwitch.OnToggled">
      <summary>Invoked before the Toggled event is raised.</summary>
    </member>
    <member name="T:ModernWpf.Controls.UniformGridLayout">
      <summary>Positions elements sequentially from left to right or top to bottom in a wrapping layout.</summary>
    </member>
    <member name="M:ModernWpf.Controls.UniformGridLayout.#ctor">
      <summary>Initializes a new instance of the <see cref="ModernWpf.Controls.UniformGridLayout?text=UniformGridLayout" /> class.</summary>
    </member>
    <member name="P:ModernWpf.Controls.UniformGridLayout.ItemsJustification">
      <summary>Gets or sets a value that indicates how items are aligned on the non-scrolling or non-virtualizing axis.</summary>
      <returns>An enumeration value that indicates how items are aligned. The default is Start.</returns>
    </member>
    <member name="F:ModernWpf.Controls.UniformGridLayout.ItemsJustificationProperty">
      <summary>Identifies the <see cref="ModernWpf.Controls.UniformGridLayout.ItemsJustification?text=ItemsJustification" /> dependency property.</summary>
      <returns>The identifier for the <see cref="ModernWpf.Controls.UniformGridLayout.ItemsJustification?text=ItemsJustification" /> dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.UniformGridLayout.ItemsStretch">
      <summary>Gets or sets a value that indicates how items are sized to fill the available space.</summary>
      <returns>An enumeration value that indicates how items are sized to fill the available space. The default is None.</returns>
    </member>
    <member name="F:ModernWpf.Controls.UniformGridLayout.ItemsStretchProperty">
      <summary>Identifies the <see cref="ModernWpf.Controls.UniformGridLayout.ItemsStretch?text=ItemsStretch" /> dependency property.</summary>
      <returns>The identifier for the <see cref="ModernWpf.Controls.UniformGridLayout.ItemsStretch?text=ItemsStretch" /> dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.UniformGridLayout.MinColumnSpacing">
      <summary>Gets or sets the minimum space between items on the horizontal axis.</summary>
      <returns>The minimum space (in pixels) between items on the horizontal axis.</returns>
    </member>
    <member name="F:ModernWpf.Controls.UniformGridLayout.MinColumnSpacingProperty">
      <summary>Identifies the <see cref="ModernWpf.Controls.UniformGridLayout.MinColumnSpacing?text=MinColumnSpacing" /> dependency property.</summary>
      <returns>The identifier for the <see cref="ModernWpf.Controls.UniformGridLayout.MinColumnSpacing?text=MinColumnSpacing" /> dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.UniformGridLayout.MinItemHeight">
      <summary>Gets or sets the minimum height of each item.</summary>
      <returns>The minimum height (in pixels) of each item. The default is NaN, in which case the height of the first item is used as the minimum.</returns>
    </member>
    <member name="F:ModernWpf.Controls.UniformGridLayout.MinItemHeightProperty">
      <summary>Identifies the <see cref="ModernWpf.Controls.UniformGridLayout.MinItemHeight?text=MinItemHeight" /> dependency property.</summary>
      <returns>The identifier for the <see cref="ModernWpf.Controls.UniformGridLayout.MinItemHeight?text=MinItemHeight" /> dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.UniformGridLayout.MinItemWidth">
      <summary>Gets or sets the minimum width of each item.</summary>
      <returns>The minimum width (in pixels) of each item. The default is NaN, in which case the width of the first item is used as the minimum.</returns>
    </member>
    <member name="F:ModernWpf.Controls.UniformGridLayout.MinItemWidthProperty">
      <summary>Identifies the <see cref="ModernWpf.Controls.UniformGridLayout.MinItemWidth?text=MinItemWidth" /> dependency property.</summary>
      <returns>The identifier for the <see cref="ModernWpf.Controls.UniformGridLayout.MinItemWidth?text=MinItemWidth" /> dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.UniformGridLayout.MinRowSpacing">
      <summary>Gets or sets the minimum space between items on the vertical axis.</summary>
      <returns>The minimum space (in pixels) between items on the vertical axis.</returns>
    </member>
    <member name="F:ModernWpf.Controls.UniformGridLayout.MinRowSpacingProperty">
      <summary>Identifies the <see cref="ModernWpf.Controls.UniformGridLayout.MinRowSpacing?text=MinRowSpacing" /> dependency property.</summary>
      <returns>The identifier for the <see cref="ModernWpf.Controls.UniformGridLayout.MinRowSpacing?text=MinRowSpacing" /> dependency property.</returns>
    </member>
    <member name="P:ModernWpf.Controls.UniformGridLayout.Orientation">
      <summary>Gets or sets the axis along which items are laid out.</summary>
      <returns>One of the enumeration values that specifies the axis along which items are laid out. The default is Vertical.</returns>
    </member>
    <member name="F:ModernWpf.Controls.UniformGridLayout.OrientationProperty">
      <summary>Identifies the <see cref="ModernWpf.Controls.UniformGridLayout.Orientation?text=Orientation" /> dependency property.</summary>
      <returns>The identifier for the <see cref="ModernWpf.Controls.UniformGridLayout.Orientation?text=Orientation" /> dependency property.</returns>
    </member>
    <member name="T:ModernWpf.Controls.UniformGridLayoutItemsJustification">
      <summary>Defines constants that specify how items are aligned on the non-scrolling or non-virtualizing axis.</summary>
    </member>
    <member name="F:ModernWpf.Controls.UniformGridLayoutItemsJustification.Center">
      <summary>Items are aligned in the center of the row or column, with extra space at the start and end. Spacing between items does not change.</summary>
    </member>
    <member name="F:ModernWpf.Controls.UniformGridLayoutItemsJustification.End">
      <summary>Items are aligned with the end of the row or column, with extra space at the start. Spacing between items does not change.</summary>
    </member>
    <member name="F:ModernWpf.Controls.UniformGridLayoutItemsJustification.SpaceAround">
      <summary>Items are aligned so that extra space is added evenly before and after each item.</summary>
    </member>
    <member name="F:ModernWpf.Controls.UniformGridLayoutItemsJustification.SpaceBetween">
      <summary>Items are aligned so that extra space is added evenly between adjacent items. No space is added at the start or end.</summary>
    </member>
    <member name="F:ModernWpf.Controls.UniformGridLayoutItemsJustification.Start">
      <summary>Items are aligned with the start of the row or column, with extra space at the end. Spacing between items does not change.</summary>
    </member>
    <member name="T:ModernWpf.Controls.UniformGridLayoutItemsStretch">
      <summary>Defines constants that specify how items are sized to fill the available space.</summary>
    </member>
    <member name="F:ModernWpf.Controls.UniformGridLayoutItemsStretch.Fill">
      <summary>The item is sized to fill the available space in the non-scrolling direction. Item size in the scrolling direction is not changed.</summary>
    </member>
    <member name="F:ModernWpf.Controls.UniformGridLayoutItemsStretch.None">
      <summary>The item retains its natural size. Use of extra space is determined by the <see cref="ModernWpf.Controls.UniformGridLayout.ItemsJustification?text=ItemsJustification" /> property.</summary>
    </member>
    <member name="F:ModernWpf.Controls.UniformGridLayoutItemsStretch.Uniform">
      <summary>The item is sized to both fill the available space in the non-scrolling direction and maintain its aspect ratio.</summary>
    </member>
    <member name="T:ModernWpf.Controls.UniformGridLayoutState">
      <summary>Represents the state of a UniformGridLayout.</summary>
    </member>
    <member name="M:ModernWpf.Controls.UniformGridLayoutState.#ctor">
      <summary>Initializes a new instance of the <see cref="ModernWpf.Controls.UniformGridLayoutState?text=UniformGridLayoutState" /> class.</summary>
    </member>
    <member name="T:ModernWpf.Controls.VirtualizingLayout">
      <summary>Represents the base class for an object that sizes and arranges child elements for a host and supports virtualization.</summary>
    </member>
    <member name="M:ModernWpf.Controls.VirtualizingLayout.#ctor">
      <summary>Initializes a new instance of the <see cref="ModernWpf.Controls.VirtualizingLayout?text=VirtualizingLayout" /> class.</summary>
    </member>
    <member name="M:ModernWpf.Controls.VirtualizingLayout.ArrangeOverride(ModernWpf.Controls.VirtualizingLayoutContext,System.Windows.Size)">
      <summary>When implemented in a derived class, provides the behavior for the "Arrange" pass of layout. Classes can override this method to define their own "Arrange" pass behavior.</summary>
      <param name="context">The context object that facilitates communication between the layout and its host container.</param>
      <param name="finalSize">The final area within the container that this object should use to arrange itself and its children.</param>
      <returns>The actual size that is used after the element is arranged in layout.</returns>
    </member>
    <member name="M:ModernWpf.Controls.VirtualizingLayout.InitializeForContextCore(ModernWpf.Controls.VirtualizingLayoutContext)">
      <summary>When overridden in a derived class, initializes any per-container state the layout requires when it is attached to a UIElement container.</summary>
      <param name="context">The context object that facilitates communication between the layout and its host container.</param>
    </member>
    <member name="M:ModernWpf.Controls.VirtualizingLayout.MeasureOverride(ModernWpf.Controls.VirtualizingLayoutContext,System.Windows.Size)">
      <summary>Provides the behavior for the "Measure" pass of the layout cycle. Classes can override this method to define their own "Measure" pass behavior.</summary>
      <param name="context">The context object that facilitates communication between the layout and its host container.</param>
      <param name="availableSize">The available size that this object can give to child objects. Infinity can be specified as a value to indicate that the object will size to whatever content is available.</param>
      <returns>The size that this object determines it needs during layout, based on its calculations of the allocated sizes for child objects or based on other considerations such as a fixed container size.</returns>
    </member>
    <member name="M:ModernWpf.Controls.VirtualizingLayout.OnItemsChangedCore(ModernWpf.Controls.VirtualizingLayoutContext,System.Object,System.Windows.Interop.NotifyCollectionChangedEventArgs)">
      <summary>Notifies the layout when the data collection assigned to the container element (ItemsSource) has changed.</summary>
      <param name="context">The context object that facilitates communication between the layout and its host container.</param>
      <param name="source">The data source.</param>
      <param name="args">Data about the collection change.</param>
    </member>
    <member name="M:ModernWpf.Controls.VirtualizingLayout.UninitializeForContextCore(ModernWpf.Controls.VirtualizingLayoutContext)">
      <summary>When overridden in a derived class, removes any state the layout previously stored on the UIElement container.</summary>
      <param name="context">The context object that facilitates communication between the layout and its host container.</param>
    </member>
    <member name="T:ModernWpf.Controls.VirtualizingLayoutContext">
      <summary>Represents the base class for layout context types that support virtualization.</summary>
    </member>
    <member name="M:ModernWpf.Controls.VirtualizingLayoutContext.#ctor">
      <summary>Initializes a new instance of the <see cref="ModernWpf.Controls.VirtualizingLayoutContext?text=VirtualizingLayoutContext" /> class.</summary>
    </member>
    <member name="M:ModernWpf.Controls.VirtualizingLayoutContext.GetItemAt(System.Int32)">
      <summary>Retrieves the data item in the source found at the specified index.</summary>
      <param name="index">The index of the data item to retrieve.</param>
      <returns>The data item at the specified index.</returns>
    </member>
    <member name="M:ModernWpf.Controls.VirtualizingLayoutContext.GetItemAtCore(System.Int32)">
      <summary>When implemented in a derived class, retrieves the data item in the source found at the specified index.</summary>
      <param name="index">The index of the data item to retrieve.</param>
      <returns>The data item at the specified index.</returns>
    </member>
    <member name="M:ModernWpf.Controls.VirtualizingLayoutContext.GetOrCreateElementAt(System.Int32)">
      <summary>Retrieves a UIElement that represents the data item in the source found at the specified index. By default, if an element already exists, it is returned; otherwise, a new element is created.</summary>
      <param name="index">The index of the data item to retrieve a UIElement for.</param>
      <returns>A UIElement that represents the data item.</returns>
    </member>
    <member name="M:ModernWpf.Controls.VirtualizingLayoutContext.GetOrCreateElementAt(System.Int32,ModernWpf.Controls.ElementRealizationOptions)">
      <summary>Retrieves a UIElement that represents the data item in the source found at the specified index using the specified options.</summary>
      <param name="index">The index of the data item to retrieve a UIElement for.</param>
      <param name="options">A value of <see cref="ModernWpf.Controls.ElementRealizationOptions?text=ElementRealizationOptions" /> that specifies whether to suppress automatic recycling of the retrieved element or force creation of a new element.</param>
      <returns>A UIElement that represents the data item.</returns>
    </member>
    <member name="M:ModernWpf.Controls.VirtualizingLayoutContext.GetOrCreateElementAtCore(System.Int32,ModernWpf.Controls.ElementRealizationOptions)">
      <param name="index" />
      <param name="options" />
    </member>
    <member name="P:ModernWpf.Controls.VirtualizingLayoutContext.ItemCount">
      <summary>Gets the number of items in the data.</summary>
      <returns>The number of items in the data.</returns>
    </member>
    <member name="M:ModernWpf.Controls.VirtualizingLayoutContext.ItemCountCore">
      <summary>When implemented in a derived class, retrieves the number of items in the data.</summary>
      <returns>The number of items in the data.</returns>
    </member>
    <member name="P:ModernWpf.Controls.VirtualizingLayoutContext.LayoutOrigin">
      <summary>Gets or sets the origin point for the estimated content size.</summary>
      <returns>The origin point for the estimated content size.</returns>
    </member>
    <member name="P:ModernWpf.Controls.VirtualizingLayoutContext.LayoutOriginCore">
      <summary>Implements the behavior of <see cref="ModernWpf.Controls.VirtualizingLayoutContext.LayoutOrigin?text=LayoutOrigin" /> in a derived or custom VirtualizingLayoutContext.</summary>
      <returns>The value that should be returned as <see cref="ModernWpf.Controls.VirtualizingLayoutContext.LayoutOrigin?text=LayoutOrigin" /> by the VirtualizingLayoutContext.</returns>
    </member>
    <member name="P:ModernWpf.Controls.VirtualizingLayoutContext.RealizationRect">
      <summary>Gets an area that represents the viewport and buffer that the layout should fill with realized elements.</summary>
      <returns>An area that represents the viewport and buffer that the layout should fill with realized elements.</returns>
    </member>
    <member name="M:ModernWpf.Controls.VirtualizingLayoutContext.RealizationRectCore">
      <summary>When implemented in a derived class, retrieves an area that represents the viewport and buffer that the layout should fill with realized elements.</summary>
      <returns>An area that represents the viewport and buffer that the layout should fill with realized elements.</returns>
    </member>
    <member name="P:ModernWpf.Controls.VirtualizingLayoutContext.RecommendedAnchorIndex">
      <summary>Gets the recommended index from which to start the generation and layout of elements.</summary>
      <returns>The recommended index from which the layout should start.</returns>
    </member>
    <member name="P:ModernWpf.Controls.VirtualizingLayoutContext.RecommendedAnchorIndexCore">
      <summary>Implements the behavior for getting the return value of <see cref="ModernWpf.Controls.VirtualizingLayoutContext.RecommendedAnchorIndex?text=RecommendedAnchorIndex" /> in a derived or custom VirtualizingLayoutContext.</summary>
      <returns>The value that should be returned as <see cref="ModernWpf.Controls.VirtualizingLayoutContext.RecommendedAnchorIndex?text=RecommendedAnchorIndex" /> by the VirtualizingLayoutContext.</returns>
    </member>
    <member name="M:ModernWpf.Controls.VirtualizingLayoutContext.RecycleElement(System.Windows.UIElement)">
      <summary>Clears the specified UIElement and allows it to be either re-used or released.</summary>
      <param name="element">The element to clear.</param>
    </member>
    <member name="M:ModernWpf.Controls.VirtualizingLayoutContext.RecycleElementCore(System.Windows.UIElement)">
      <summary>When implemented in a derived class, clears the specified UIElement and allows it to be either re-used or released.</summary>
      <param name="element">The element to clear.</param>
    </member>
  </members>
</doc>